// ---------------------------------------------------------------------------
//
// This file is part of:
//
// FRIDA - FRee Interactive DisAssembler
// Copyright (C) 2017,2023 Ivo van Poorten
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; ONLY version 2 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//
// ---------------------------------------------------------------------------

// Source: https://clrhome.org/table/
// Massaged to this with Python and Beautiful Soup 4
// Also: http://www.z80.info/decoding.htm

// ---------------------------------------------------------------------------

#include "disassembler.h"
#include "frida.h"

struct distabitem {
    const char * inst;
    const char * oper;
    const char * binary;
          char size;
    const char * cycles;
          char mode;
          char extmode;
    const char * full_instruction;
    const char * flags;
    const char * description;
};

enum modes {
    MODE_IMP = 0,
    MODE_DIS,
    MODE_N,
    MODE_NN,
    MODE_MEM_NN
};

enum extmode {
    EXT_NORMAL = 0,
    EXT_JUMP,
    EXT_CALL,
    EXT_UNDOCUMENTED,
    EXT_Z180
};

#define INVALID { nullptr, nullptr, nullptr, 0, 0, 0, 0, nullptr, nullptr, nullptr }

static struct distabitem distab_normal[256] = {
{ "nop", "", "  00  ", 1, "4", MODE_IMP, EXT_NORMAL, "nop", "", "No operation is performed." },
{ "ld", "bc,%1", "  01  <i>nn</i> ", 3, "10", MODE_NN, EXT_NORMAL, "ld bc,<i>nn</i>", "", "Loads <i>nn</i> into BC." },
{ "ld", "(bc),a", "  02  ", 1, "7", MODE_IMP, EXT_NORMAL, "ld (bc),a", "", "Stores A into the memory location pointed to by BC." },
{ "inc", "bc", "  03  ", 1, "6", MODE_IMP, EXT_NORMAL, "inc bc", "", "Adds one to BC." },
{ "inc", "b", "  04  ", 1, "4", MODE_IMP, EXT_NORMAL, "inc b", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds one to B." },
{ "dec", "b", "  05  ", 1, "4", MODE_IMP, EXT_NORMAL, "dec b", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts one from B." },
{ "ld", "b,%1", "  06  <i>n</i> ", 2, "7", MODE_N, EXT_NORMAL, "ld b,<i>n</i>", "", "Loads <i>n</i> into B." },
{ "rlca", "", "  07  ", 1, "4", MODE_IMP, EXT_NORMAL, "rlca", "C: as defined<br>N: reset<br>H: reset<br>", "The contents of A are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0." },
{ "ex", "af,af'", "  08  ", 1, "4", MODE_IMP, EXT_NORMAL, "ex af,af'", "", "Exchanges the 16-bit contents of AF and AF'." },
{ "add", "hl,bc", "  09  ", 1, "11", MODE_IMP, EXT_NORMAL, "add hl,bc", "C: as defined<br>N: as defined<br>H: as defined<br>", "The value of BC is added to HL." },
{ "ld", "a,(bc)", "  0A  ", 1, "7", MODE_IMP, EXT_NORMAL, "ld a,(bc)", "", "Loads the value pointed to by BC into A." },
{ "dec", "bc", "  0B  ", 1, "6", MODE_IMP, EXT_NORMAL, "dec bc", "", "Subtracts one from BC." },
{ "inc", "c", "  0C  ", 1, "4", MODE_IMP, EXT_NORMAL, "inc c", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds one to C." },
{ "dec", "c", "  0D  ", 1, "4", MODE_IMP, EXT_NORMAL, "dec c", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts one from C." },
{ "ld", "c,%1", "  0E  <i>n</i> ", 2, "7", MODE_N, EXT_NORMAL, "ld c,<i>n</i>", "", "Loads <i>n</i> into C." },
{ "rrca", "", "  0F  ", 1, "4", MODE_IMP, EXT_NORMAL, "rrca", "C: as defined<br>N: reset<br>H: reset<br>", "The contents of A are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7." },
{ "djnz", "%1", "  10  <i>d</i>-$-2  ", 2, "13/8", MODE_DIS, EXT_JUMP, "djnz <i>d</i>", "", "The B register is decremented, and if not zero, the signed value <i>d</i> is added to PC. The jump is measured from the start of the instruction opcode." },
{ "ld", "de,%1", "  11  <i>nn</i> ", 3, "10", MODE_NN, EXT_NORMAL, "ld de,<i>nn</i>", "", "Loads <i>nn</i> into DE." },
{ "ld", "(de),a", "  12  ", 1, "7", MODE_IMP, EXT_NORMAL, "ld (de),a", "", "Stores A into the memory location pointed to by DE." },
{ "inc", "de", "  13  ", 1, "6", MODE_IMP, EXT_NORMAL, "inc de", "", "Adds one to DE." },
{ "inc", "d", "  14  ", 1, "4", MODE_IMP, EXT_NORMAL, "inc d", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds one to D." },
{ "dec", "d", "  15  ", 1, "4", MODE_IMP, EXT_NORMAL, "dec d", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts one from D." },
{ "ld", "d,%1", "  16  <i>n</i> ", 2, "7", MODE_N, EXT_NORMAL, "ld d,<i>n</i>", "", "Loads <i>n</i> into D." },
{ "rla", "", "  17  ", 1, "4", MODE_IMP, EXT_NORMAL, "rla", "C: as defined<br>N: reset<br>H: reset<br>", "The contents of A are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0." },
{ "jr", "%1", "  18  <i>d</i>-$-2  ", 2, "12", MODE_DIS, EXT_JUMP, "jr <i>d</i>", "", "The signed value <i>d</i> is added to PC. The jump is measured from the start of the instruction opcode." },
{ "add", "hl,de", "  19  ", 1, "11", MODE_IMP, EXT_NORMAL, "add hl,de", "C: as defined<br>N: as defined<br>H: as defined<br>", "The value of DE is added to HL." },
{ "ld", "a,(de)", "  1A  ", 1, "7", MODE_IMP, EXT_NORMAL, "ld a,(de)", "", "Loads the value pointed to by DE into A." },
{ "dec", "de", "  1B  ", 1, "6", MODE_IMP, EXT_NORMAL, "dec de", "", "Subtracts one from DE." },
{ "inc", "e", "  1C  ", 1, "4", MODE_IMP, EXT_NORMAL, "inc e", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds one to E." },
{ "dec", "e", "  1D  ", 1, "4", MODE_IMP, EXT_NORMAL, "dec e", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts one from E." },
{ "ld", "e,%1", "  1E  <i>n</i> ", 2, "7", MODE_N, EXT_NORMAL, "ld e,<i>n</i>", "", "Loads <i>n</i> into E." },
{ "rra", "", "  1F  ", 1, "4", MODE_IMP, EXT_NORMAL, "rra", "C: as defined<br>N: reset<br>H: reset<br>", "The contents of A are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7." },
{ "jr", "nz,%1", "  20  <i>d</i>-$-2  ", 2, "12/7", MODE_DIS, EXT_JUMP, "jr nz,<i>d</i>", "", "If the zero flag is unset, the signed value <i>d</i> is added to PC. The jump is measured from the start of the instruction opcode." },
{ "ld", "hl,%1", "  21  <i>nn</i> ", 3, "10", MODE_NN, EXT_NORMAL, "ld hl,<i>nn</i>", "", "Loads <i>nn</i> into HL." },
{ "ld", "(%1),hl", "  22  <i>nn</i> ", 3, "16", MODE_MEM_NN, EXT_NORMAL, "ld (<i>nn</i>),hl", "", "Stores HL into the memory location pointed to by <i>nn</i>." },
{ "inc", "hl", "  23  ", 1, "6", MODE_IMP, EXT_NORMAL, "inc hl", "", "Adds one to HL." },
{ "inc", "h", "  24  ", 1, "4", MODE_IMP, EXT_NORMAL, "inc h", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds one to H." },
{ "dec", "h", "  25  ", 1, "4", MODE_IMP, EXT_NORMAL, "dec h", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts one from H." },
{ "ld", "h,%1", "  26  <i>n</i> ", 2, "7", MODE_N, EXT_NORMAL, "ld h,<i>n</i>", "", "Loads <i>n</i> into H." },
{ "daa", "", "  27  ", 1, "4", MODE_IMP, EXT_NORMAL, "daa", "C: exceptional<br>PV: detects parity<br>H: exceptional<br>Z: as defined<br>S: as defined<br>", "Adjusts A for BCD addition and subtraction operations." },
{ "jr", "z,%1", "  28  <i>d</i>-$-2  ", 2, "12/7", MODE_DIS, EXT_JUMP, "jr z,<i>d</i>", "", "If the zero flag is set, the signed value <i>d</i> is added to PC. The jump is measured from the start of the instruction opcode." },
{ "add", "hl,hl", "  29  ", 1, "11", MODE_IMP, EXT_NORMAL, "add hl,hl", "C: as defined<br>N: as defined<br>H: as defined<br>", "The value of HL is added to HL." },
{ "ld", "hl,(%1)", "  2A  <i>nn</i> ", 3, "16", MODE_MEM_NN, EXT_NORMAL, "ld hl,(<i>nn</i>)", "", "Loads the value pointed to by <i>nn</i> into HL." },
{ "dec", "hl", "  2B  ", 1, "6", MODE_IMP, EXT_NORMAL, "dec hl", "", "Subtracts one from HL." },
{ "inc", "l", "  2C  ", 1, "4", MODE_IMP, EXT_NORMAL, "inc l", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds one to L." },
{ "dec", "l", "  2D  ", 1, "4", MODE_IMP, EXT_NORMAL, "dec l", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts one from L." },
{ "ld", "l,%1", "  2E  <i>n</i> ", 2, "7", MODE_N, EXT_NORMAL, "ld l,<i>n</i>", "", "Loads <i>n</i> into L." },
{ "cpl", "", "  2F  ", 1, "4", MODE_IMP, EXT_NORMAL, "cpl", "N: set<br>H: set<br>", "The contents of A are inverted (one's complement)." },
{ "jr", "nc,%1", "  30  <i>d</i>-$-2  ", 2, "12/7", MODE_DIS, EXT_JUMP, "jr nc,<i>d</i>", "", "If the carry flag is unset, the signed value <i>d</i> is added to PC. The jump is measured from the start of the instruction opcode." },
{ "ld", "sp,%1", "  31  <i>nn</i> ", 3, "10", MODE_NN, EXT_NORMAL, "ld sp,<i>nn</i>", "", "Loads <i>nn</i> into SP." },
{ "ld", "(%1),a", "  32  <i>nn</i> ", 3, "13", MODE_MEM_NN, EXT_NORMAL, "ld (<i>nn</i>),a", "", "Stores A into the memory location pointed to by <i>nn</i>." },
{ "inc", "sp", "  33  ", 1, "6", MODE_IMP, EXT_NORMAL, "inc sp", "", "Adds one to SP." },
{ "inc", "(hl)", "  34  ", 1, "11", MODE_IMP, EXT_NORMAL, "inc (hl)", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds one to (HL)." },
{ "dec", "(hl)", "  35  ", 1, "11", MODE_IMP, EXT_NORMAL, "dec (hl)", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts one from (HL)." },
{ "ld", "(hl),%1", "  36  <i>n</i> ", 2, "10", MODE_N, EXT_NORMAL, "ld (hl),<i>n</i>", "", "Loads <i>n</i> into (HL)." },
{ "scf", "", "  37  ", 1, "4", MODE_IMP, EXT_NORMAL, "scf", "C: set<br>N: reset<br>H: reset<br>", "Sets the carry flag." },
{ "jr", "c,%1", "  38  <i>d</i>-$-2  ", 2, "12/7", MODE_DIS, EXT_JUMP, "jr c,<i>d</i>", "", "If the carry flag is set, the signed value <i>d</i> is added to PC. The jump is measured from the start of the instruction opcode." },
{ "add", "hl,sp", "  39  ", 1, "11", MODE_IMP, EXT_NORMAL, "add hl,sp", "C: as defined<br>N: as defined<br>H: as defined<br>", "The value of SP is added to HL." },
{ "ld", "a,(%1)", "  3A  <i>nn</i> ", 3, "13", MODE_MEM_NN, EXT_NORMAL, "ld a,(<i>nn</i>)", "", "Loads the value pointed to by <i>nn</i> into A." },
{ "dec", "sp", "  3B  ", 1, "6", MODE_IMP, EXT_NORMAL, "dec sp", "", "Subtracts one from SP." },
{ "inc", "a", "  3C  ", 1, "4", MODE_IMP, EXT_NORMAL, "inc a", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds one to A." },
{ "dec", "a", "  3D  ", 1, "4", MODE_IMP, EXT_NORMAL, "dec a", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts one from A." },
{ "ld", "a,%1", "  3E  <i>n</i> ", 2, "7", MODE_N, EXT_NORMAL, "ld a,<i>n</i>", "", "Loads <i>n</i> into A." },
{ "ccf", "", "  3F  ", 1, "4", MODE_IMP, EXT_NORMAL, "ccf", "C: exceptional<br>N: reset<br>H: exceptional<br>", "Inverts the carry flag." },
{ "ld", "b,b", "  40  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld b,b", "", "The contents of B are loaded into B." },
{ "ld", "b,c", "  41  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld b,c", "", "The contents of C are loaded into B." },
{ "ld", "b,d", "  42  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld b,d", "", "The contents of D are loaded into B." },
{ "ld", "b,e", "  43  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld b,e", "", "The contents of E are loaded into B." },
{ "ld", "b,h", "  44  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld b,h", "", "The contents of H are loaded into B." },
{ "ld", "b,l", "  45  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld b,l", "", "The contents of L are loaded into B." },
{ "ld", "b,(hl)", "  46  ", 1, "7", MODE_IMP, EXT_NORMAL, "ld b,(hl)", "", "The contents of (HL) are loaded into B." },
{ "ld", "b,a", "  47  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld b,a", "", "The contents of A are loaded into B." },
{ "ld", "c,b", "  48  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld c,b", "", "The contents of B are loaded into C." },
{ "ld", "c,c", "  49  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld c,c", "", "The contents of C are loaded into C." },
{ "ld", "c,d", "  4A  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld c,d", "", "The contents of D are loaded into C." },
{ "ld", "c,e", "  4B  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld c,e", "", "The contents of E are loaded into C." },
{ "ld", "c,h", "  4C  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld c,h", "", "The contents of H are loaded into C." },
{ "ld", "c,l", "  4D  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld c,l", "", "The contents of L are loaded into C." },
{ "ld", "c,(hl)", "  4E  ", 1, "7", MODE_IMP, EXT_NORMAL, "ld c,(hl)", "", "The contents of (HL) are loaded into C." },
{ "ld", "c,a", "  4F  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld c,a", "", "The contents of A are loaded into C." },
{ "ld", "d,b", "  50  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld d,b", "", "The contents of B are loaded into D." },
{ "ld", "d,c", "  51  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld d,c", "", "The contents of C are loaded into D." },
{ "ld", "d,d", "  52  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld d,d", "", "The contents of D are loaded into D." },
{ "ld", "d,e", "  53  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld d,e", "", "The contents of E are loaded into D." },
{ "ld", "d,h", "  54  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld d,h", "", "The contents of H are loaded into D." },
{ "ld", "d,l", "  55  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld d,l", "", "The contents of L are loaded into D." },
{ "ld", "d,(hl)", "  56  ", 1, "7", MODE_IMP, EXT_NORMAL, "ld d,(hl)", "", "The contents of (HL) are loaded into D." },
{ "ld", "d,a", "  57  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld d,a", "", "The contents of A are loaded into D." },
{ "ld", "e,b", "  58  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld e,b", "", "The contents of B are loaded into E." },
{ "ld", "e,c", "  59  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld e,c", "", "The contents of C are loaded into E." },
{ "ld", "e,d", "  5A  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld e,d", "", "The contents of D are loaded into E." },
{ "ld", "e,e", "  5B  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld e,e", "", "The contents of E are loaded into E." },
{ "ld", "e,h", "  5C  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld e,h", "", "The contents of H are loaded into E." },
{ "ld", "e,l", "  5D  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld e,l", "", "The contents of L are loaded into E." },
{ "ld", "e,(hl)", "  5E  ", 1, "7", MODE_IMP, EXT_NORMAL, "ld e,(hl)", "", "The contents of (HL) are loaded into E." },
{ "ld", "e,a", "  5F  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld e,a", "", "The contents of A are loaded into E." },
{ "ld", "h,b", "  60  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld h,b", "", "The contents of B are loaded into H." },
{ "ld", "h,c", "  61  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld h,c", "", "The contents of C are loaded into H." },
{ "ld", "h,d", "  62  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld h,d", "", "The contents of D are loaded into H." },
{ "ld", "h,e", "  63  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld h,e", "", "The contents of E are loaded into H." },
{ "ld", "h,h", "  64  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld h,h", "", "The contents of H are loaded into H." },
{ "ld", "h,l", "  65  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld h,l", "", "The contents of L are loaded into H." },
{ "ld", "h,(hl)", "  66  ", 1, "7", MODE_IMP, EXT_NORMAL, "ld h,(hl)", "", "The contents of (HL) are loaded into H." },
{ "ld", "h,a", "  67  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld h,a", "", "The contents of A are loaded into H." },
{ "ld", "l,b", "  68  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld l,b", "", "The contents of B are loaded into L." },
{ "ld", "l,c", "  69  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld l,c", "", "The contents of C are loaded into L." },
{ "ld", "l,d", "  6A  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld l,d", "", "The contents of D are loaded into L." },
{ "ld", "l,e", "  6B  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld l,e", "", "The contents of E are loaded into L." },
{ "ld", "l,h", "  6C  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld l,h", "", "The contents of H are loaded into L." },
{ "ld", "l,l", "  6D  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld l,l", "", "The contents of L are loaded into L." },
{ "ld", "l,(hl)", "  6E  ", 1, "7", MODE_IMP, EXT_NORMAL, "ld l,(hl)", "", "The contents of (HL) are loaded into L." },
{ "ld", "l,a", "  6F  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld l,a", "", "The contents of A are loaded into L." },
{ "ld", "(hl),b", "  70  ", 1, "7", MODE_IMP, EXT_NORMAL, "ld (hl),b", "", "The contents of B are loaded into (HL)." },
{ "ld", "(hl),c", "  71  ", 1, "7", MODE_IMP, EXT_NORMAL, "ld (hl),c", "", "The contents of C are loaded into (HL)." },
{ "ld", "(hl),d", "  72  ", 1, "7", MODE_IMP, EXT_NORMAL, "ld (hl),d", "", "The contents of D are loaded into (HL)." },
{ "ld", "(hl),e", "  73  ", 1, "7", MODE_IMP, EXT_NORMAL, "ld (hl),e", "", "The contents of E are loaded into (HL)." },
{ "ld", "(hl),h", "  74  ", 1, "7", MODE_IMP, EXT_NORMAL, "ld (hl),h", "", "The contents of H are loaded into (HL)." },
{ "ld", "(hl),l", "  75  ", 1, "7", MODE_IMP, EXT_NORMAL, "ld (hl),l", "", "The contents of L are loaded into (HL)." },
{ "halt", "", "  76  ", 1, "4", MODE_IMP, EXT_NORMAL, "halt", "", "Suspends CPU operation until an interrupt or reset occurs." },
{ "ld", "(hl),a", "  77  ", 1, "7", MODE_IMP, EXT_NORMAL, "ld (hl),a", "", "The contents of A are loaded into (HL)." },
{ "ld", "a,b", "  78  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld a,b", "", "The contents of B are loaded into A." },
{ "ld", "a,c", "  79  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld a,c", "", "The contents of C are loaded into A." },
{ "ld", "a,d", "  7A  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld a,d", "", "The contents of D are loaded into A." },
{ "ld", "a,e", "  7B  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld a,e", "", "The contents of E are loaded into A." },
{ "ld", "a,h", "  7C  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld a,h", "", "The contents of H are loaded into A." },
{ "ld", "a,l", "  7D  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld a,l", "", "The contents of L are loaded into A." },
{ "ld", "a,(hl)", "  7E  ", 1, "7", MODE_IMP, EXT_NORMAL, "ld a,(hl)", "", "The contents of (HL) are loaded into A." },
{ "ld", "a,a", "  7F  ", 1, "4", MODE_IMP, EXT_NORMAL, "ld a,a", "", "The contents of A are loaded into A." },
{ "add", "a,b", "  80  ", 1, "4", MODE_IMP, EXT_NORMAL, "add a,b", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds B to A." },
{ "add", "a,c", "  81  ", 1, "4", MODE_IMP, EXT_NORMAL, "add a,c", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds C to A." },
{ "add", "a,d", "  82  ", 1, "4", MODE_IMP, EXT_NORMAL, "add a,d", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds D to A." },
{ "add", "a,e", "  83  ", 1, "4", MODE_IMP, EXT_NORMAL, "add a,e", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds E to A." },
{ "add", "a,h", "  84  ", 1, "4", MODE_IMP, EXT_NORMAL, "add a,h", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds H to A." },
{ "add", "a,l", "  85  ", 1, "4", MODE_IMP, EXT_NORMAL, "add a,l", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds L to A." },
{ "add", "a,(hl)", "  86  ", 1, "7", MODE_IMP, EXT_NORMAL, "add a,(hl)", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds (HL) to A." },
{ "add", "a,a", "  87  ", 1, "4", MODE_IMP, EXT_NORMAL, "add a,a", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds A to A." },
{ "adc", "a,b", "  88  ", 1, "4", MODE_IMP, EXT_NORMAL, "adc a,b", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds B and the carry flag to A." },
{ "adc", "a,c", "  89  ", 1, "4", MODE_IMP, EXT_NORMAL, "adc a,c", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds C and the carry flag to A." },
{ "adc", "a,d", "  8A  ", 1, "4", MODE_IMP, EXT_NORMAL, "adc a,d", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds D and the carry flag to A." },
{ "adc", "a,e", "  8B  ", 1, "4", MODE_IMP, EXT_NORMAL, "adc a,e", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds E and the carry flag to A." },
{ "adc", "a,h", "  8C  ", 1, "4", MODE_IMP, EXT_NORMAL, "adc a,h", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds H and the carry flag to A." },
{ "adc", "a,l", "  8D  ", 1, "4", MODE_IMP, EXT_NORMAL, "adc a,l", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds L and the carry flag to A." },
{ "adc", "a,(hl)", "  8E  ", 1, "7", MODE_IMP, EXT_NORMAL, "adc a,(hl)", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds (HL) and the carry flag to A." },
{ "adc", "a,a", "  8F  ", 1, "4", MODE_IMP, EXT_NORMAL, "adc a,a", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds A and the carry flag to A." },
{ "sub", "b", "  90  ", 1, "4", MODE_IMP, EXT_NORMAL, "sub b", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts B from A." },
{ "sub", "c", "  91  ", 1, "4", MODE_IMP, EXT_NORMAL, "sub c", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts C from A." },
{ "sub", "d", "  92  ", 1, "4", MODE_IMP, EXT_NORMAL, "sub d", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts D from A." },
{ "sub", "e", "  93  ", 1, "4", MODE_IMP, EXT_NORMAL, "sub e", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts E from A." },
{ "sub", "h", "  94  ", 1, "4", MODE_IMP, EXT_NORMAL, "sub h", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts H from A." },
{ "sub", "l", "  95  ", 1, "4", MODE_IMP, EXT_NORMAL, "sub l", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts L from A." },
{ "sub", "(hl)", "  96  ", 1, "7", MODE_IMP, EXT_NORMAL, "sub (hl)", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts (HL) from A." },
{ "sub", "a", "  97  ", 1, "4", MODE_IMP, EXT_NORMAL, "sub a", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts A from A." },
{ "sbc", "a,b", "  98  ", 1, "4", MODE_IMP, EXT_NORMAL, "sbc a,b", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts B and the carry flag from A." },
{ "sbc", "a,c", "  99  ", 1, "4", MODE_IMP, EXT_NORMAL, "sbc a,c", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts C and the carry flag from A." },
{ "sbc", "a,d", "  9A  ", 1, "4", MODE_IMP, EXT_NORMAL, "sbc a,d", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts D and the carry flag from A." },
{ "sbc", "a,e", "  9B  ", 1, "4", MODE_IMP, EXT_NORMAL, "sbc a,e", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts E and the carry flag from A." },
{ "sbc", "a,h", "  9C  ", 1, "4", MODE_IMP, EXT_NORMAL, "sbc a,h", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts H and the carry flag from A." },
{ "sbc", "a,l", "  9D  ", 1, "4", MODE_IMP, EXT_NORMAL, "sbc a,l", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts L and the carry flag from A." },
{ "sbc", "a,(hl)", "  9E  ", 1, "7", MODE_IMP, EXT_NORMAL, "sbc a,(hl)", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts (HL) and the carry flag from A." },
{ "sbc", "a,a", "  9F  ", 1, "4", MODE_IMP, EXT_NORMAL, "sbc a,a", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts A and the carry flag from A." },
{ "and", "b", "  A0  ", 1, "4", MODE_IMP, EXT_NORMAL, "and b", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Bitwise AND on A with B." },
{ "and", "c", "  A1  ", 1, "4", MODE_IMP, EXT_NORMAL, "and c", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Bitwise AND on A with C." },
{ "and", "d", "  A2  ", 1, "4", MODE_IMP, EXT_NORMAL, "and d", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Bitwise AND on A with D." },
{ "and", "e", "  A3  ", 1, "4", MODE_IMP, EXT_NORMAL, "and e", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Bitwise AND on A with E." },
{ "and", "h", "  A4  ", 1, "4", MODE_IMP, EXT_NORMAL, "and h", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Bitwise AND on A with H." },
{ "and", "l", "  A5  ", 1, "4", MODE_IMP, EXT_NORMAL, "and l", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Bitwise AND on A with L." },
{ "and", "(hl)", "  A6  ", 1, "7", MODE_IMP, EXT_NORMAL, "and (hl)", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Bitwise AND on A with (HL)." },
{ "and", "a", "  A7  ", 1, "4", MODE_IMP, EXT_NORMAL, "and a", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Bitwise AND on A with A." },
{ "xor", "b", "  A8  ", 1, "4", MODE_IMP, EXT_NORMAL, "xor b", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise XOR on A with B." },
{ "xor", "c", "  A9  ", 1, "4", MODE_IMP, EXT_NORMAL, "xor c", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise XOR on A with C." },
{ "xor", "d", "  AA  ", 1, "4", MODE_IMP, EXT_NORMAL, "xor d", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise XOR on A with D." },
{ "xor", "e", "  AB  ", 1, "4", MODE_IMP, EXT_NORMAL, "xor e", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise XOR on A with E." },
{ "xor", "h", "  AC  ", 1, "4", MODE_IMP, EXT_NORMAL, "xor h", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise XOR on A with H." },
{ "xor", "l", "  AD  ", 1, "4", MODE_IMP, EXT_NORMAL, "xor l", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise XOR on A with L." },
{ "xor", "(hl)", "  AE  ", 1, "7", MODE_IMP, EXT_NORMAL, "xor (hl)", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise XOR on A with (HL)." },
{ "xor", "a", "  AF  ", 1, "4", MODE_IMP, EXT_NORMAL, "xor a", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise XOR on A with A." },
{ "or", "b", "  B0  ", 1, "4", MODE_IMP, EXT_NORMAL, "or b", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise OR on A with B." },
{ "or", "c", "  B1  ", 1, "4", MODE_IMP, EXT_NORMAL, "or c", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise OR on A with C." },
{ "or", "d", "  B2  ", 1, "4", MODE_IMP, EXT_NORMAL, "or d", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise OR on A with D." },
{ "or", "e", "  B3  ", 1, "4", MODE_IMP, EXT_NORMAL, "or e", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise OR on A with E." },
{ "or", "h", "  B4  ", 1, "4", MODE_IMP, EXT_NORMAL, "or h", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise OR on A with H." },
{ "or", "l", "  B5  ", 1, "4", MODE_IMP, EXT_NORMAL, "or l", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise OR on A with L." },
{ "or", "(hl)", "  B6  ", 1, "7", MODE_IMP, EXT_NORMAL, "or (hl)", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise OR on A with (HL)." },
{ "or", "a", "  B7  ", 1, "4", MODE_IMP, EXT_NORMAL, "or a", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise OR on A with A." },
{ "cp", "b", "  B8  ", 1, "4", MODE_IMP, EXT_NORMAL, "cp b", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts B from A and affects flags according to the result. A is not modified." },
{ "cp", "c", "  B9  ", 1, "4", MODE_IMP, EXT_NORMAL, "cp c", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts C from A and affects flags according to the result. A is not modified." },
{ "cp", "d", "  BA  ", 1, "4", MODE_IMP, EXT_NORMAL, "cp d", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts D from A and affects flags according to the result. A is not modified." },
{ "cp", "e", "  BB  ", 1, "4", MODE_IMP, EXT_NORMAL, "cp e", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts E from A and affects flags according to the result. A is not modified." },
{ "cp", "h", "  BC  ", 1, "4", MODE_IMP, EXT_NORMAL, "cp h", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts H from A and affects flags according to the result. A is not modified." },
{ "cp", "l", "  BD  ", 1, "4", MODE_IMP, EXT_NORMAL, "cp l", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts L from A and affects flags according to the result. A is not modified." },
{ "cp", "(hl)", "  BE  ", 1, "7", MODE_IMP, EXT_NORMAL, "cp (hl)", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts (HL) from A and affects flags according to the result. A is not modified." },
{ "cp", "a", "  BF  ", 1, "4", MODE_IMP, EXT_NORMAL, "cp a", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts A from A and affects flags according to the result. A is not modified." },
{ "ret", "nz", "  C0  ", 1, "11/5", MODE_IMP, EXT_NORMAL, "ret nz", "", "If the zero flag is unset, the top stack entry is popped into PC." },
{ "pop", "bc", "  C1  ", 1, "10", MODE_IMP, EXT_NORMAL, "pop bc", "", "The memory location pointed to by SP is stored into C and SP is incremented. The memory location pointed to by SP is stored into B and SP is incremented again." },
{ "jp", "nz,%1", "  C2  <i>nn</i> ", 3, "10", MODE_NN, EXT_JUMP, "jp nz,<i>nn</i>", "", "If the zero flag is unset, <i>nn</i> is copied to PC." },
{ "jp", "%1", "  C3  <i>nn</i> ", 3, "10", MODE_NN, EXT_JUMP, "jp <i>nn</i>", "", "<i>nn</i> is copied to PC." },
{ "call", "nz,%1", "  C4  <i>nn</i> ", 3, "17/10", MODE_NN, EXT_CALL, "call nz,<i>nn</i>", "", "If the zero flag is unset, the current PC value plus three is pushed onto the stack, then is loaded with <i>nn</i>." },
{ "push", "bc", "  C5  ", 1, "11", MODE_IMP, EXT_NORMAL, "push bc", "", "SP is decremented and B is stored into the memory location pointed to by SP. SP is decremented again and C is stored into the memory location pointed to by SP." },
{ "add", "a,%1", "  C6  <i>n</i> ", 2, "7", MODE_N, EXT_NORMAL, "add a,<i>n</i>", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds <i>n</i> to A." },
{ "rst", "00h", "  C7  ", 1, "11", MODE_IMP, EXT_NORMAL, "rst 00h", "", "The current PC value plus one is pushed onto the stack, then is loaded with 0." },
{ "ret", "z", "  C8  ", 1, "11/5", MODE_IMP, EXT_NORMAL, "ret z", "", "If the zero flag is set, the top stack entry is popped into PC." },
{ "ret", "", "  C9  ", 1, "10", MODE_IMP, EXT_NORMAL, "ret", "", "The top stack entry is popped into PC." },
{ "jp", "z,%1", "  CA  <i>nn</i> ", 3, "10", MODE_NN, EXT_JUMP, "jp z,<i>nn</i>", "", "If the zero flag is set, <i>nn</i> is copied to PC." },
INVALID,
{ "call", "z,%1", "  CC  <i>nn</i> ", 3, "17/10", MODE_NN, EXT_CALL, "call z,<i>nn</i>", "", "If the zero flag is set, the current PC value plus three is pushed onto the stack, then is loaded with <i>nn</i>." },
{ "call", "%1", "  CD  <i>nn</i> ", 3, "17", MODE_NN, EXT_CALL, "call <i>nn</i>", "", "The current PC value plus three is pushed onto the stack, then is loaded with <i>nn</i>." },
{ "adc", "a,%1", "  CE  <i>n</i> ", 2, "7", MODE_N, EXT_NORMAL, "adc a,<i>n</i>", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds <i>n</i> and the carry flag to A." },
{ "rst", "08h", "  CF  ", 1, "11", MODE_IMP, EXT_NORMAL, "rst 08h", "", "The current PC value plus one is pushed onto the stack, then is loaded with 8." },
{ "ret", "nc", "  D0  ", 1, "11/5", MODE_IMP, EXT_NORMAL, "ret nc", "", "If the carry flag is unset, the top stack entry is popped into PC." },
{ "pop", "de", "  D1  ", 1, "10", MODE_IMP, EXT_NORMAL, "pop de", "", "The memory location pointed to by SP is stored into E and SP is incremented. The memory location pointed to by SP is stored into D and SP is incremented again." },
{ "jp", "nc,%1", "  D2  <i>nn</i> ", 3, "10", MODE_NN, EXT_JUMP, "jp nc,<i>nn</i>", "", "If the carry flag is unset, <i>nn</i> is copied to PC." },
{ "out", "(%1),a", "  D3  <i>n</i> ", 2, "11", MODE_N, EXT_NORMAL, "out (<i>n</i>),a", "", "The value of A is written to port <i>n</i>." },
{ "call", "nc,%1", "  D4  <i>nn</i> ", 3, "17/10", MODE_NN, EXT_CALL, " nc,<i>nn</i>", "", "If the carry flag is unset, the current PC value plus three is pushed onto the stack, then is loaded with <i>nn</i>." },
{ "push", "de", "  D5  ", 1, "11", MODE_IMP, EXT_NORMAL, "push de", "", "SP is decremented and D is stored into the memory location pointed to by SP. SP is decremented again and E is stored into the memory location pointed to by SP." },
{ "sub", "%1", "  D6  <i>n</i> ", 2, "7", MODE_N, EXT_NORMAL, "sub <i>n</i>", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts <i>n</i> from A." },
{ "rst", "10h", "  D7  ", 1, "11", MODE_IMP, EXT_NORMAL, "rst 10h", "", "The current PC value plus one is pushed onto the stack, then is loaded with 16." },
{ "ret", "c", "  D8  ", 1, "11/5", MODE_IMP, EXT_NORMAL, "ret c", "", "If the carry flag is set, the top stack entry is popped into PC." },
{ "exx", "", "  D9  ", 1, "4", MODE_IMP, EXT_NORMAL, "exx", "", "Exchanges the 16-bit contents of BC, DE, and HL with BC', DE', and HL'." },
{ "jp", "c,%1", "  DA  <i>nn</i> ", 3, "10", MODE_NN, EXT_JUMP, "jp c,<i>nn</i>", "", "If the carry flag is set, <i>nn</i> is copied to PC." },
{ "in", "a,(%1)", "  DB  <i>n</i> ", 2, "11", MODE_N, EXT_NORMAL, "in a,(<i>n</i>)", "", "A byte from port <i>n</i> is written to A." },
{ "call", "c,%1", "  DC  <i>nn</i> ", 3, "17/10", MODE_NN, EXT_CALL, "call c,<i>nn</i>", "", "If the carry flag is set, the current PC value plus three is pushed onto the stack, then is loaded with <i>nn</i>." },
INVALID,
{ "sbc", "a,%1", "  DE  <i>n</i> ", 2, "7", MODE_N, EXT_NORMAL, "sbc a,<i>n</i>", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts <i>n</i> and the carry flag from A." },
{ "rst", "18h", "  DF  ", 1, "11", MODE_IMP, EXT_NORMAL, "rst 18h", "", "The current PC value plus one is pushed onto the stack, then is loaded with 24." },
{ "ret", "po", "  E0  ", 1, "11/5", MODE_IMP, EXT_NORMAL, "ret po", "", "If the parity/overflow flag is unset, the top stack entry is popped into PC." },
{ "pop", "hl", "  E1  ", 1, "10", MODE_IMP, EXT_NORMAL, "pop hl", "", "The memory location pointed to by SP is stored into L and SP is incremented. The memory location pointed to by SP is stored into H and SP is incremented again." },
{ "jp", "po,%1", "  E2  <i>nn</i> ", 3, "10", MODE_NN, EXT_JUMP, "jp po,<i>nn</i>", "", "If the parity/overflow flag is unset, <i>nn</i> is copied to PC." },
{ "ex", "(sp),hl", "  E3  ", 1, "19", MODE_IMP, EXT_NORMAL, "ex (sp),hl", "", "Exchanges (SP) with L, and (SP+1) with H." },
{ "call", "po,%1", "  E4  <i>nn</i> ", 3, "17/10", MODE_NN, EXT_CALL, "call po,<i>nn</i>", "", "If the parity/overflow flag is unset, the current PC value plus three is pushed onto the stack, then is loaded with <i>nn</i>." },
{ "push", "hl", "  E5  ", 1, "11", MODE_IMP, EXT_NORMAL, "push hl", "", "SP is decremented and H is stored into the memory location pointed to by SP. SP is decremented again and L is stored into the memory location pointed to by SP." },
{ "and", "%1", "  E6  <i>n</i> ", 2, "7", MODE_N, EXT_NORMAL, "and <i>n</i>", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Bitwise AND on A with <i>n</i>." },
{ "rst", "20h", "  E7  ", 1, "11", MODE_IMP, EXT_NORMAL, "rst 20h", "", "The current PC value plus one is pushed onto the stack, then is loaded with 32." },
{ "ret", "pe", "  E8  ", 1, "11/5", MODE_IMP, EXT_NORMAL, "ret pe", "", "If the parity/overflow flag is set, the top stack entry is popped into PC." },
{ "jp", "(hl)", "  E9  ", 1, "4", MODE_IMP, EXT_JUMP, "jp (hl)", "", "Loads the value of HL into PC." },
{ "jp", "pe,%1", "  EA  <i>nn</i> ", 3, "10", MODE_NN, EXT_JUMP, "jp pe,<i>nn</i>", "", "If the parity/overflow flag is set, <i>nn</i> is copied to PC." },
{ "ex", "de,hl", "  EB  ", 1, "4", MODE_IMP, EXT_NORMAL, "ex de,hl", "", "Exchanges the 16-bit contents of DE and HL." },
{ "call", "pe,%1", "  EC  <i>nn</i> ", 3, "17/10", MODE_NN, EXT_CALL, "call pe,<i>nn</i>", "", "If the parity/overflow flag is set, the current PC value plus three is pushed onto the stack, then is loaded with <i>nn</i>." },
INVALID,
{ "xor", "%1", "  EE  <i>n</i> ", 2, "7", MODE_N, EXT_NORMAL, "xor <i>n</i>", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise XOR on A with <i>n</i>." },
{ "rst", "28h", "  EF  ", 1, "11", MODE_IMP, EXT_NORMAL, "rst 28h", "", "The current PC value plus one is pushed onto the stack, then is loaded with 40." },
{ "ret", "p", "  F0  ", 1, "11/5", MODE_IMP, EXT_NORMAL, "ret p", "", "If the sign flag is unset, the top stack entry is popped into PC." },
{ "pop", "af", "  F1  ", 1, "10", MODE_IMP, EXT_NORMAL, "pop af", "", "The memory location pointed to by SP is stored into f and SP is incremented. The memory location pointed to by SP is stored into A and SP is incremented again." },
{ "jp", "p,%1", "  F2  <i>nn</i> ", 3, "10", MODE_NN, EXT_JUMP, "jp p,<i>nn</i>", "", "If the sign flag is unset, <i>nn</i> is copied to PC." },
{ "di", "", "  F3  ", 1, "4", MODE_IMP, EXT_NORMAL, "di", "", "Resets both interrupt flip-flops, thus prenting maskable interrupts from triggering." },
{ "call", "p,%1", "  F4  <i>nn</i> ", 3, "17/10", MODE_NN, EXT_CALL, "call p,<i>nn</i>", "", "If the sign flag is unset, the current PC value plus three is pushed onto the stack, then is loaded with <i>nn</i>." },
{ "push", "af", "  F5  ", 1, "11", MODE_IMP, EXT_NORMAL, "push af", "", "SP is decremented and A is stored into the memory location pointed to by SP. SP is decremented again and f is stored into the memory location pointed to by SP." },
{ "or", "%1", "  F6  <i>n</i> ", 2, "7", MODE_N, EXT_NORMAL, "or <i>n</i>", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise OR on A with <i>n</i>." },
{ "rst", "30h", "  F7  ", 1, "11", MODE_IMP, EXT_NORMAL, "rst 30h", "", "The current PC value plus one is pushed onto the stack, then is loaded with 48." },
{ "ret", "m", "  F8  ", 1, "11/5", MODE_IMP, EXT_NORMAL, "ret m", "", "If the sign flag is set, the top stack entry is popped into PC." },
{ "ld", "sp,hl", "  F9  ", 1, "6", MODE_IMP, EXT_NORMAL, "ld sp,hl", "", "Loads the value of HL into SP." },
{ "jp", "m,%1", "  FA  <i>nn</i> ", 3, "10", MODE_NN, EXT_JUMP, "jp m,<i>nn</i>", "", "If the sign flag is set, <i>nn</i> is copied to PC." },
{ "ei", "", "  FB  ", 1, "4", MODE_IMP, EXT_NORMAL, "ei", "", "Sets both interrupt flip-flops, thus allowing maskable interrupts to occur. An interrupt will not occur until after the immediately following instruction." },
{ "call", "m,%1", "  FC  <i>nn</i> ", 3, "17/10", MODE_NN, EXT_CALL, "call m,<i>nn</i>", "", "If the sign flag is set, the current PC value plus three is pushed onto the stack, then is loaded with <i>nn</i>." },
INVALID,
{ "cp", "%1", "  FE  <i>n</i> ", 2, "7", MODE_N, EXT_NORMAL, "cp <i>n</i>", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts <i>n</i> from A and affects flags according to the result. A is not modified." },
{ "rst", "38h", "  FF  ", 1, "11", MODE_IMP, EXT_NORMAL, "rst 38h", "", "The current PC value plus one is pushed onto the stack, then is loaded with 56." },
};

static struct distabitem distab_CB[256] = {
{ "rlc", "b", "  CB  00  ", 2, "8", MODE_IMP, EXT_NORMAL, "rlc b", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of B are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0." },
{ "rlc", "c", "  CB  01  ", 2, "8", MODE_IMP, EXT_NORMAL, "rlc c", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of C are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0." },
{ "rlc", "d", "  CB  02  ", 2, "8", MODE_IMP, EXT_NORMAL, "rlc d", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of D are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0." },
{ "rlc", "e", "  CB  03  ", 2, "8", MODE_IMP, EXT_NORMAL, "rlc e", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of E are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0." },
{ "rlc", "h", "  CB  04  ", 2, "8", MODE_IMP, EXT_NORMAL, "rlc h", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of H are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0." },
{ "rlc", "l", "  CB  05  ", 2, "8", MODE_IMP, EXT_NORMAL, "rlc l", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of L are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0." },
{ "rlc", "(hl)", "  CB  06  ", 2, "15", MODE_IMP, EXT_NORMAL, "rlc (hl)", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of (HL) are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0." },
{ "rlc", "a", "  CB  07  ", 2, "8", MODE_IMP, EXT_NORMAL, "rlc a", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of A are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0." },
{ "rrc", "b", "  CB  08  ", 2, "8", MODE_IMP, EXT_NORMAL, "rrc b", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of B are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7." },
{ "rrc", "c", "  CB  09  ", 2, "8", MODE_IMP, EXT_NORMAL, "rrc c", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of C are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7." },
{ "rrc", "d", "  CB  0A  ", 2, "8", MODE_IMP, EXT_NORMAL, "rrc d", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of D are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7." },
{ "rrc", "e", "  CB  0B  ", 2, "8", MODE_IMP, EXT_NORMAL, "rrc e", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of E are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7." },
{ "rrc", "h", "  CB  0C  ", 2, "8", MODE_IMP, EXT_NORMAL, "rrc h", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of H are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7." },
{ "rrc", "l", "  CB  0D  ", 2, "8", MODE_IMP, EXT_NORMAL, "rrc l", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of L are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7." },
{ "rrc", "(hl)", "  CB  0E  ", 2, "15", MODE_IMP, EXT_NORMAL, "rrc (hl)", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of (HL) are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7." },
{ "rrc", "a", "  CB  0F  ", 2, "8", MODE_IMP, EXT_NORMAL, "rrc a", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of A are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7." },
{ "rl", "b", "  CB  10  ", 2, "8", MODE_IMP, EXT_NORMAL, "rl b", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of B are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0." },
{ "rl", "c", "  CB  11  ", 2, "8", MODE_IMP, EXT_NORMAL, "rl c", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of C are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0." },
{ "rl", "d", "  CB  12  ", 2, "8", MODE_IMP, EXT_NORMAL, "rl d", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of D are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0." },
{ "rl", "e", "  CB  13  ", 2, "8", MODE_IMP, EXT_NORMAL, "rl e", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of E are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0." },
{ "rl", "h", "  CB  14  ", 2, "8", MODE_IMP, EXT_NORMAL, "rl h", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of H are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0." },
{ "rl", "l", "  CB  15  ", 2, "8", MODE_IMP, EXT_NORMAL, "rl l", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of L are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0." },
{ "rl", "(hl)", "  CB  16  ", 2, "15", MODE_IMP, EXT_NORMAL, "rl (hl)", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of (HL) are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0." },
{ "rl", "a", "  CB  17  ", 2, "8", MODE_IMP, EXT_NORMAL, "rl a", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of A are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0." },
{ "rr", "b", "  CB  18  ", 2, "8", MODE_IMP, EXT_NORMAL, "rr b", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of B are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7." },
{ "rr", "c", "  CB  19  ", 2, "8", MODE_IMP, EXT_NORMAL, "rr c", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of C are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7." },
{ "rr", "d", "  CB  1A  ", 2, "8", MODE_IMP, EXT_NORMAL, "rr d", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of D are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7." },
{ "rr", "e", "  CB  1B  ", 2, "8", MODE_IMP, EXT_NORMAL, "rr e", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of E are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7." },
{ "rr", "h", "  CB  1C  ", 2, "8", MODE_IMP, EXT_NORMAL, "rr h", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of H are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7." },
{ "rr", "l", "  CB  1D  ", 2, "8", MODE_IMP, EXT_NORMAL, "rr l", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of L are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7." },
{ "rr", "(hl)", "  CB  1E  ", 2, "15", MODE_IMP, EXT_NORMAL, "rr (hl)", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of (HL) are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7." },
{ "rr", "a", "  CB  1F  ", 2, "8", MODE_IMP, EXT_NORMAL, "rr a", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of A are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7." },
{ "sla", "b", "  CB  20  ", 2, "8", MODE_IMP, EXT_NORMAL, "sla b", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of B are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0." },
{ "sla", "c", "  CB  21  ", 2, "8", MODE_IMP, EXT_NORMAL, "sla c", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of C are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0." },
{ "sla", "d", "  CB  22  ", 2, "8", MODE_IMP, EXT_NORMAL, "sla d", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of D are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0." },
{ "sla", "e", "  CB  23  ", 2, "8", MODE_IMP, EXT_NORMAL, "sla e", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of E are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0." },
{ "sla", "h", "  CB  24  ", 2, "8", MODE_IMP, EXT_NORMAL, "sla h", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of H are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0." },
{ "sla", "l", "  CB  25  ", 2, "8", MODE_IMP, EXT_NORMAL, "sla l", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of L are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0." },
{ "sla", "(hl)", "  CB  26  ", 2, "15", MODE_IMP, EXT_NORMAL, "sla (hl)", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of (HL) are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0." },
{ "sla", "a", "  CB  27  ", 2, "8", MODE_IMP, EXT_NORMAL, "sla a", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of A are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0." },
{ "sra", "b", "  CB  28  ", 2, "8", MODE_IMP, EXT_NORMAL, "sra b", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of B are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged." },
{ "sra", "c", "  CB  29  ", 2, "8", MODE_IMP, EXT_NORMAL, "sra c", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of C are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged." },
{ "sra", "d", "  CB  2A  ", 2, "8", MODE_IMP, EXT_NORMAL, "sra d", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of D are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged." },
{ "sra", "e", "  CB  2B  ", 2, "8", MODE_IMP, EXT_NORMAL, "sra e", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of E are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged." },
{ "sra", "h", "  CB  2C  ", 2, "8", MODE_IMP, EXT_NORMAL, "sra h", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of H are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged." },
{ "sra", "l", "  CB  2D  ", 2, "8", MODE_IMP, EXT_NORMAL, "sra l", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of L are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged." },
{ "sra", "(hl)", "  CB  2E  ", 2, "15", MODE_IMP, EXT_NORMAL, "sra (hl)", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of (HL) are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged." },
{ "sra", "a", "  CB  2F  ", 2, "8", MODE_IMP, EXT_NORMAL, "sra a", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of A are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged." },
{ "sll", "b", "  CB  30  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sll b", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of B are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0." },
{ "sll", "c", "  CB  31  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sll c", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of C are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0." },
{ "sll", "d", "  CB  32  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sll d", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of D are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0." },
{ "sll", "e", "  CB  33  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sll e", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of E are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0." },
{ "sll", "h", "  CB  34  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sll h", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of H are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0." },
{ "sll", "l", "  CB  35  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sll l", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of L are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0." },
{ "sll", "(hl)", "  CB  36  ", 2, "15", MODE_IMP, EXT_UNDOCUMENTED, "sll (hl)", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of (HL) are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0." },
{ "sll", "a", "  CB  37  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sll a", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of A are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0." },
{ "srl", "b", "  CB  38  ", 2, "8", MODE_IMP, EXT_NORMAL, "srl b", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of B are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7." },
{ "srl", "c", "  CB  39  ", 2, "8", MODE_IMP, EXT_NORMAL, "srl c", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of C are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7." },
{ "srl", "d", "  CB  3A  ", 2, "8", MODE_IMP, EXT_NORMAL, "srl d", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of D are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7." },
{ "srl", "e", "  CB  3B  ", 2, "8", MODE_IMP, EXT_NORMAL, "srl e", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of E are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7." },
{ "srl", "h", "  CB  3C  ", 2, "8", MODE_IMP, EXT_NORMAL, "srl h", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of H are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7." },
{ "srl", "l", "  CB  3D  ", 2, "8", MODE_IMP, EXT_NORMAL, "srl l", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of L are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7." },
{ "srl", "(hl)", "  CB  3E  ", 2, "15", MODE_IMP, EXT_NORMAL, "srl (hl)", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of (HL) are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7." },
{ "srl", "a", "  CB  3F  ", 2, "8", MODE_IMP, EXT_NORMAL, "srl a", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of A are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7." },
{ "bit", "0,b", "  CB  40  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 0,b", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 0 of B." },
{ "bit", "0,c", "  CB  41  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 0,c", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 0 of C." },
{ "bit", "0,d", "  CB  42  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 0,d", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 0 of D." },
{ "bit", "0,e", "  CB  43  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 0,e", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 0 of E." },
{ "bit", "0,h", "  CB  44  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 0,h", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 0 of H." },
{ "bit", "0,l", "  CB  45  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 0,l", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 0 of L." },
{ "bit", "0,(hl)", "  CB  46  ", 2, "12", MODE_IMP, EXT_NORMAL, "bit 0,(hl)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 0 of (HL)." },
{ "bit", "0,a", "  CB  47  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 0,a", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 0 of A." },
{ "bit", "1,b", "  CB  48  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 1,b", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 1 of B." },
{ "bit", "1,c", "  CB  49  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 1,c", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 1 of C." },
{ "bit", "1,d", "  CB  4A  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 1,d", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 1 of D." },
{ "bit", "1,e", "  CB  4B  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 1,e", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 1 of E." },
{ "bit", "1,h", "  CB  4C  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 1,h", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 1 of H." },
{ "bit", "1,l", "  CB  4D  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 1,l", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 1 of L." },
{ "bit", "1,(hl)", "  CB  4E  ", 2, "12", MODE_IMP, EXT_NORMAL, "bit 1,(hl)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 1 of (HL)." },
{ "bit", "1,a", "  CB  4F  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 1,a", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 1 of A." },
{ "bit", "2,b", "  CB  50  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 2,b", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 2 of B." },
{ "bit", "2,c", "  CB  51  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 2,c", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 2 of C." },
{ "bit", "2,d", "  CB  52  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 2,d", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 2 of D." },
{ "bit", "2,e", "  CB  53  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 2,e", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 2 of E." },
{ "bit", "2,h", "  CB  54  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 2,h", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 2 of H." },
{ "bit", "2,l", "  CB  55  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 2,l", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 2 of L." },
{ "bit", "2,(hl)", "  CB  56  ", 2, "12", MODE_IMP, EXT_NORMAL, "bit 2,(hl)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 2 of (HL)." },
{ "bit", "2,a", "  CB  57  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 2,a", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 2 of A." },
{ "bit", "3,b", "  CB  58  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 3,b", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 3 of B." },
{ "bit", "3,c", "  CB  59  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 3,c", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 3 of C." },
{ "bit", "3,d", "  CB  5A  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 3,d", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 3 of D." },
{ "bit", "3,e", "  CB  5B  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 3,e", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 3 of E." },
{ "bit", "3,h", "  CB  5C  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 3,h", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 3 of H." },
{ "bit", "3,l", "  CB  5D  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 3,l", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 3 of L." },
{ "bit", "3,(hl)", "  CB  5E  ", 2, "12", MODE_IMP, EXT_NORMAL, "bit 3,(hl)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 3 of (HL)." },
{ "bit", "3,a", "  CB  5F  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 3,a", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 3 of A." },
{ "bit", "4,b", "  CB  60  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 4,b", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 4 of B." },
{ "bit", "4,c", "  CB  61  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 4,c", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 4 of C." },
{ "bit", "4,d", "  CB  62  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 4,d", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 4 of D." },
{ "bit", "4,e", "  CB  63  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 4,e", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 4 of E." },
{ "bit", "4,h", "  CB  64  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 4,h", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 4 of H." },
{ "bit", "4,l", "  CB  65  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 4,l", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 4 of L." },
{ "bit", "4,(hl)", "  CB  66  ", 2, "12", MODE_IMP, EXT_NORMAL, "bit 4,(hl)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 4 of (HL)." },
{ "bit", "4,a", "  CB  67  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 4,a", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 4 of A." },
{ "bit", "5,b", "  CB  68  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 5,b", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 5 of B." },
{ "bit", "5,c", "  CB  69  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 5,c", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 5 of C." },
{ "bit", "5,d", "  CB  6A  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 5,d", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 5 of D." },
{ "bit", "5,e", "  CB  6B  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 5,e", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 5 of E." },
{ "bit", "5,h", "  CB  6C  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 5,h", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 5 of H." },
{ "bit", "5,l", "  CB  6D  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 5,l", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 5 of L." },
{ "bit", "5,(hl)", "  CB  6E  ", 2, "12", MODE_IMP, EXT_NORMAL, "bit 5,(hl)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 5 of (HL)." },
{ "bit", "5,a", "  CB  6F  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 5,a", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 5 of A." },
{ "bit", "6,b", "  CB  70  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 6,b", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 6 of B." },
{ "bit", "6,c", "  CB  71  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 6,c", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 6 of C." },
{ "bit", "6,d", "  CB  72  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 6,d", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 6 of D." },
{ "bit", "6,e", "  CB  73  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 6,e", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 6 of E." },
{ "bit", "6,h", "  CB  74  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 6,h", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 6 of H." },
{ "bit", "6,l", "  CB  75  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 6,l", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 6 of L." },
{ "bit", "6,(hl)", "  CB  76  ", 2, "12", MODE_IMP, EXT_NORMAL, "bit 6,(hl)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 6 of (HL)." },
{ "bit", "6,a", "  CB  77  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 6,a", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 6 of A." },
{ "bit", "7,b", "  CB  78  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 7,b", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 7 of B." },
{ "bit", "7,c", "  CB  79  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 7,c", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 7 of C." },
{ "bit", "7,d", "  CB  7A  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 7,d", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 7 of D." },
{ "bit", "7,e", "  CB  7B  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 7,e", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 7 of E." },
{ "bit", "7,h", "  CB  7C  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 7,h", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 7 of H." },
{ "bit", "7,l", "  CB  7D  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 7,l", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 7 of L." },
{ "bit", "7,(hl)", "  CB  7E  ", 2, "12", MODE_IMP, EXT_NORMAL, "bit 7,(hl)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 7 of (HL)." },
{ "bit", "7,a", "  CB  7F  ", 2, "8", MODE_IMP, EXT_NORMAL, "bit 7,a", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 7 of A." },
{ "res", "0,b", "  CB  80  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 0,b", "", "Resets bit 0 of B." },
{ "res", "0,c", "  CB  81  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 0,c", "", "Resets bit 0 of C." },
{ "res", "0,d", "  CB  82  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 0,d", "", "Resets bit 0 of D." },
{ "res", "0,e", "  CB  83  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 0,e", "", "Resets bit 0 of E." },
{ "res", "0,h", "  CB  84  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 0,h", "", "Resets bit 0 of H." },
{ "res", "0,l", "  CB  85  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 0,l", "", "Resets bit 0 of L." },
{ "res", "0,(hl)", "  CB  86  ", 2, "15", MODE_IMP, EXT_NORMAL, "res 0,(hl)", "", "Resets bit 0 of (HL)." },
{ "res", "0,a", "  CB  87  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 0,a", "", "Resets bit 0 of A." },
{ "res", "1,b", "  CB  88  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 1,b", "", "Resets bit 1 of B." },
{ "res", "1,c", "  CB  89  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 1,c", "", "Resets bit 1 of C." },
{ "res", "1,d", "  CB  8A  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 1,d", "", "Resets bit 1 of D." },
{ "res", "1,e", "  CB  8B  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 1,e", "", "Resets bit 1 of E." },
{ "res", "1,h", "  CB  8C  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 1,h", "", "Resets bit 1 of H." },
{ "res", "1,l", "  CB  8D  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 1,l", "", "Resets bit 1 of L." },
{ "res", "1,(hl)", "  CB  8E  ", 2, "15", MODE_IMP, EXT_NORMAL, "res 1,(hl)", "", "Resets bit 1 of (HL)." },
{ "res", "1,a", "  CB  8F  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 1,a", "", "Resets bit 1 of A." },
{ "res", "2,b", "  CB  90  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 2,b", "", "Resets bit 2 of B." },
{ "res", "2,c", "  CB  91  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 2,c", "", "Resets bit 2 of C." },
{ "res", "2,d", "  CB  92  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 2,d", "", "Resets bit 2 of D." },
{ "res", "2,e", "  CB  93  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 2,e", "", "Resets bit 2 of E." },
{ "res", "2,h", "  CB  94  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 2,h", "", "Resets bit 2 of H." },
{ "res", "2,l", "  CB  95  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 2,l", "", "Resets bit 2 of L." },
{ "res", "2,(hl)", "  CB  96  ", 2, "15", MODE_IMP, EXT_NORMAL, "res 2,(hl)", "", "Resets bit 2 of (HL)." },
{ "res", "2,a", "  CB  97  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 2,a", "", "Resets bit 2 of A." },
{ "res", "3,b", "  CB  98  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 3,b", "", "Resets bit 3 of B." },
{ "res", "3,c", "  CB  99  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 3,c", "", "Resets bit 3 of C." },
{ "res", "3,d", "  CB  9A  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 3,d", "", "Resets bit 3 of D." },
{ "res", "3,e", "  CB  9B  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 3,e", "", "Resets bit 3 of E." },
{ "res", "3,h", "  CB  9C  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 3,h", "", "Resets bit 3 of H." },
{ "res", "3,l", "  CB  9D  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 3,l", "", "Resets bit 3 of L." },
{ "res", "3,(hl)", "  CB  9E  ", 2, "15", MODE_IMP, EXT_NORMAL, "res 3,(hl)", "", "Resets bit 3 of (HL)." },
{ "res", "3,a", "  CB  9F  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 3,a", "", "Resets bit 3 of A." },
{ "res", "4,b", "  CB  A0  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 4,b", "", "Resets bit 4 of B." },
{ "res", "4,c", "  CB  A1  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 4,c", "", "Resets bit 4 of C." },
{ "res", "4,d", "  CB  A2  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 4,d", "", "Resets bit 4 of D." },
{ "res", "4,e", "  CB  A3  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 4,e", "", "Resets bit 4 of E." },
{ "res", "4,h", "  CB  A4  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 4,h", "", "Resets bit 4 of H." },
{ "res", "4,l", "  CB  A5  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 4,l", "", "Resets bit 4 of L." },
{ "res", "4,(hl)", "  CB  A6  ", 2, "15", MODE_IMP, EXT_NORMAL, "res 4,(hl)", "", "Resets bit 4 of (HL)." },
{ "res", "4,a", "  CB  A7  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 4,a", "", "Resets bit 4 of A." },
{ "res", "5,b", "  CB  A8  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 5,b", "", "Resets bit 5 of B." },
{ "res", "5,c", "  CB  A9  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 5,c", "", "Resets bit 5 of C." },
{ "res", "5,d", "  CB  AA  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 5,d", "", "Resets bit 5 of D." },
{ "res", "5,e", "  CB  AB  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 5,e", "", "Resets bit 5 of E." },
{ "res", "5,h", "  CB  AC  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 5,h", "", "Resets bit 5 of H." },
{ "res", "5,l", "  CB  AD  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 5,l", "", "Resets bit 5 of L." },
{ "res", "5,(hl)", "  CB  AE  ", 2, "15", MODE_IMP, EXT_NORMAL, "res 5,(hl)", "", "Resets bit 5 of (HL)." },
{ "res", "5,a", "  CB  AF  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 5,a", "", "Resets bit 5 of A." },
{ "res", "6,b", "  CB  B0  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 6,b", "", "Resets bit 6 of B." },
{ "res", "6,c", "  CB  B1  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 6,c", "", "Resets bit 6 of C." },
{ "res", "6,d", "  CB  B2  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 6,d", "", "Resets bit 6 of D." },
{ "res", "6,e", "  CB  B3  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 6,e", "", "Resets bit 6 of E." },
{ "res", "6,h", "  CB  B4  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 6,h", "", "Resets bit 6 of H." },
{ "res", "6,l", "  CB  B5  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 6,l", "", "Resets bit 6 of L." },
{ "res", "6,(hl)", "  CB  B6  ", 2, "15", MODE_IMP, EXT_NORMAL, "res 6,(hl)", "", "Resets bit 6 of (HL)." },
{ "res", "6,a", "  CB  B7  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 6,a", "", "Resets bit 6 of A." },
{ "res", "7,b", "  CB  B8  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 7,b", "", "Resets bit 7 of B." },
{ "res", "7,c", "  CB  B9  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 7,c", "", "Resets bit 7 of C." },
{ "res", "7,d", "  CB  BA  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 7,d", "", "Resets bit 7 of D." },
{ "res", "7,e", "  CB  BB  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 7,e", "", "Resets bit 7 of E." },
{ "res", "7,h", "  CB  BC  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 7,h", "", "Resets bit 7 of H." },
{ "res", "7,l", "  CB  BD  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 7,l", "", "Resets bit 7 of L." },
{ "res", "7,(hl)", "  CB  BE  ", 2, "15", MODE_IMP, EXT_NORMAL, "res 7,(hl)", "", "Resets bit 7 of (HL)." },
{ "res", "7,a", "  CB  BF  ", 2, "8", MODE_IMP, EXT_NORMAL, "res 7,a", "", "Resets bit 7 of A." },
{ "set", "0,b", "  CB  C0  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 0,b", "", "Sets bit 0 of B." },
{ "set", "0,c", "  CB  C1  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 0,c", "", "Sets bit 0 of C." },
{ "set", "0,d", "  CB  C2  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 0,d", "", "Sets bit 0 of D." },
{ "set", "0,e", "  CB  C3  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 0,e", "", "Sets bit 0 of E." },
{ "set", "0,h", "  CB  C4  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 0,h", "", "Sets bit 0 of H." },
{ "set", "0,l", "  CB  C5  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 0,l", "", "Sets bit 0 of L." },
{ "set", "0,(hl)", "  CB  C6  ", 2, "15", MODE_IMP, EXT_NORMAL, "set 0,(hl)", "", "Sets bit 0 of (HL)." },
{ "set", "0,a", "  CB  C7  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 0,a", "", "Sets bit 0 of A." },
{ "set", "1,b", "  CB  C8  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 1,b", "", "Sets bit 1 of B." },
{ "set", "1,c", "  CB  C9  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 1,c", "", "Sets bit 1 of C." },
{ "set", "1,d", "  CB  CA  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 1,d", "", "Sets bit 1 of D." },
{ "set", "1,e", "  CB  CB  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 1,e", "", "Sets bit 1 of E." },
{ "set", "1,h", "  CB  CC  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 1,h", "", "Sets bit 1 of H." },
{ "set", "1,l", "  CB  CD  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 1,l", "", "Sets bit 1 of L." },
{ "set", "1,(hl)", "  CB  CE  ", 2, "15", MODE_IMP, EXT_NORMAL, "set 1,(hl)", "", "Sets bit 1 of (HL)." },
{ "set", "1,a", "  CB  CF  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 1,a", "", "Sets bit 1 of A." },
{ "set", "2,b", "  CB  D0  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 2,b", "", "Sets bit 2 of B." },
{ "set", "2,c", "  CB  D1  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 2,c", "", "Sets bit 2 of C." },
{ "set", "2,d", "  CB  D2  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 2,d", "", "Sets bit 2 of D." },
{ "set", "2,e", "  CB  D3  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 2,e", "", "Sets bit 2 of E." },
{ "set", "2,h", "  CB  D4  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 2,h", "", "Sets bit 2 of H." },
{ "set", "2,l", "  CB  D5  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 2,l", "", "Sets bit 2 of L." },
{ "set", "2,(hl)", "  CB  D6  ", 2, "15", MODE_IMP, EXT_NORMAL, "set 2,(hl)", "", "Sets bit 2 of (HL)." },
{ "set", "2,a", "  CB  D7  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 2,a", "", "Sets bit 2 of A." },
{ "set", "3,b", "  CB  D8  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 3,b", "", "Sets bit 3 of B." },
{ "set", "3,c", "  CB  D9  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 3,c", "", "Sets bit 3 of C." },
{ "set", "3,d", "  CB  DA  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 3,d", "", "Sets bit 3 of D." },
{ "set", "3,e", "  CB  DB  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 3,e", "", "Sets bit 3 of E." },
{ "set", "3,h", "  CB  DC  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 3,h", "", "Sets bit 3 of H." },
{ "set", "3,l", "  CB  DD  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 3,l", "", "Sets bit 3 of L." },
{ "set", "3,(hl)", "  CB  DE  ", 2, "15", MODE_IMP, EXT_NORMAL, "set 3,(hl)", "", "Sets bit 3 of (HL)." },
{ "set", "3,a", "  CB  DF  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 3,a", "", "Sets bit 3 of A." },
{ "set", "4,b", "  CB  E0  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 4,b", "", "Sets bit 4 of B." },
{ "set", "4,c", "  CB  E1  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 4,c", "", "Sets bit 4 of C." },
{ "set", "4,d", "  CB  E2  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 4,d", "", "Sets bit 4 of D." },
{ "set", "4,e", "  CB  E3  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 4,e", "", "Sets bit 4 of E." },
{ "set", "4,h", "  CB  E4  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 4,h", "", "Sets bit 4 of H." },
{ "set", "4,l", "  CB  E5  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 4,l", "", "Sets bit 4 of L." },
{ "set", "4,(hl)", "  CB  E6  ", 2, "15", MODE_IMP, EXT_NORMAL, "set 4,(hl)", "", "Sets bit 4 of (HL)." },
{ "set", "4,a", "  CB  E7  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 4,a", "", "Sets bit 4 of A." },
{ "set", "5,b", "  CB  E8  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 5,b", "", "Sets bit 5 of B." },
{ "set", "5,c", "  CB  E9  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 5,c", "", "Sets bit 5 of C." },
{ "set", "5,d", "  CB  EA  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 5,d", "", "Sets bit 5 of D." },
{ "set", "5,e", "  CB  EB  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 5,e", "", "Sets bit 5 of E." },
{ "set", "5,h", "  CB  EC  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 5,h", "", "Sets bit 5 of H." },
{ "set", "5,l", "  CB  ED  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 5,l", "", "Sets bit 5 of L." },
{ "set", "5,(hl)", "  CB  EE  ", 2, "15", MODE_IMP, EXT_NORMAL, "set 5,(hl)", "", "Sets bit 5 of (HL)." },
{ "set", "5,a", "  CB  EF  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 5,a", "", "Sets bit 5 of A." },
{ "set", "6,b", "  CB  F0  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 6,b", "", "Sets bit 6 of B." },
{ "set", "6,c", "  CB  F1  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 6,c", "", "Sets bit 6 of C." },
{ "set", "6,d", "  CB  F2  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 6,d", "", "Sets bit 6 of D." },
{ "set", "6,e", "  CB  F3  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 6,e", "", "Sets bit 6 of E." },
{ "set", "6,h", "  CB  F4  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 6,h", "", "Sets bit 6 of H." },
{ "set", "6,l", "  CB  F5  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 6,l", "", "Sets bit 6 of L." },
{ "set", "6,(hl)", "  CB  F6  ", 2, "15", MODE_IMP, EXT_NORMAL, "set 6,(hl)", "", "Sets bit 6 of (HL)." },
{ "set", "6,a", "  CB  F7  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 6,a", "", "Sets bit 6 of A." },
{ "set", "7,b", "  CB  F8  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 7,b", "", "Sets bit 7 of B." },
{ "set", "7,c", "  CB  F9  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 7,c", "", "Sets bit 7 of C." },
{ "set", "7,d", "  CB  FA  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 7,d", "", "Sets bit 7 of D." },
{ "set", "7,e", "  CB  FB  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 7,e", "", "Sets bit 7 of E." },
{ "set", "7,h", "  CB  FC  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 7,h", "", "Sets bit 7 of H." },
{ "set", "7,l", "  CB  FD  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 7,l", "", "Sets bit 7 of L." },
{ "set", "7,(hl)", "  CB  FE  ", 2, "15", MODE_IMP, EXT_NORMAL, "set 7,(hl)", "", "Sets bit 7 of (HL)." },
{ "set", "7,a", "  CB  FF  ", 2, "8", MODE_IMP, EXT_NORMAL, "set 7,a", "", "Sets bit 7 of A." },
};

static struct distabitem distab_DD[256] = {
INVALID,
INVALID,
INVALID,
INVALID,
{ "inc", "b", "  DD  04  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "inc b", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds one to r." },
{ "dec", "b", "  DD  05  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "dec b", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts one from B." },
{ "ld", "b,%1", "  DD  06  <i>n</i> ", 3, "11", MODE_N, EXT_UNDOCUMENTED, "ld b,<i>n</i>", "", "Loads <i>n</i> into B." },
INVALID,
INVALID,
{ "add", "ix,bc", "  DD  09  ", 2, "15", MODE_IMP, EXT_NORMAL, "add ix,bc", "C: as defined<br>N: as defined<br>H: as defined<br>", "The value of BC is added to IX." },
INVALID,
INVALID,
{ "inc", "c", "  DD  0C  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "inc c", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds one to r." },
{ "dec", "c", "  DD  0D  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "dec c", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts one from C." },
{ "ld", "c,%1", "  DD  0E  <i>n</i> ", 3, "11", MODE_N, EXT_UNDOCUMENTED, "ld c,<i>n</i>", "", "Loads <i>n</i> into C." },
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
{ "inc", "d", "  DD  14  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "inc d", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds one to r." },
{ "dec", "d", "  DD  15  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "dec d", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts one from D." },
{ "ld", "d,%1", "  DD  16  <i>n</i> ", 3, "11", MODE_N, EXT_UNDOCUMENTED, "ld d,<i>n</i>", "", "Loads <i>n</i> into D." },
INVALID,
INVALID,
{ "add", "ix,de", "  DD  19  ", 2, "15", MODE_IMP, EXT_NORMAL, "add ix,de", "C: as defined<br>N: as defined<br>H: as defined<br>", "The value of DE is added to IX." },
INVALID,
INVALID,
{ "inc", "e", "  DD  1C  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "inc e", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds one to r." },
{ "dec", "e", "  DD  1D  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "dec e", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts one from E." },
{ "ld", "e,%1", "  DD  1E  <i>n</i> ", 3, "11", MODE_N, EXT_UNDOCUMENTED, "ld e,<i>n</i>", "", "Loads <i>n</i> into E." },
INVALID,
INVALID,
{ "ld", "ix,%1", "  DD  21  <i>nn</i> ", 4, "14", MODE_NN, EXT_NORMAL, "ld ix,<i>nn</i>", "", "Loads <i>nn</i> into register IX." },
{ "ld", "(%1),ix", "  DD  22  <i>nn</i> ", 4, "20", MODE_MEM_NN, EXT_NORMAL, "ld (<i>nn</i>),ix", "", "Stores IX into the memory location pointed to by <i>nn</i>." },
{ "inc", "ix", "  DD  23  ", 2, "10", MODE_IMP, EXT_NORMAL, "inc ix", "", "Adds one to IX." },
{ "inc", "ixh", "  DD  24  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "inc ixh", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds one to r." },
{ "dec", "ixh", "  DD  25  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "dec ixh", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts one from IXH." },
{ "ld", "ixh,%1", "  DD  26  <i>n</i> ", 3, "11", MODE_N, EXT_UNDOCUMENTED, "ld ixh,<i>n</i>", "", "Loads <i>n</i> into IXH." },
INVALID,
INVALID,
{ "add", "ix,ix", "  DD  29  ", 2, "15", MODE_IMP, EXT_NORMAL, "add ix,ix", "C: as defined<br>N: as defined<br>H: as defined<br>", "The value of IX is added to IX." },
{ "ld", "ix,(%1)", "  DD  2A  <i>nn</i> ", 4, "20", MODE_MEM_NN, EXT_NORMAL, "ld ix,(<i>nn</i>)", "", "Loads the value pointed to by <i>nn</i> into IX." },
{ "dec", "ix", "  DD  2B  ", 2, "10", MODE_IMP, EXT_NORMAL, "dec ix", "", "Subtracts one from IX." },
{ "inc", "ixl", "  DD  2C  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "inc ixl", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds one to r." },
{ "dec", "ixl", "  DD  2D  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "dec ixl", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts one from IXL." },
{ "ld", "ixl,%1", "  DD  2E  <i>n</i> ", 3, "11", MODE_N, EXT_UNDOCUMENTED, "ld ixl,<i>n</i>", "", "Loads <i>n</i> into IXL." },
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
{ "inc", "(ix+%1)", "  DD  34  <i>d</i> ", 3, "23", MODE_DIS, EXT_NORMAL, "inc (ix+<i>d</i>)", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds one to the memory location pointed to by IX plus <i>d</i>." },
{ "dec", "(ix+%1)", "  DD  35  <i>d</i> ", 3, "23", MODE_DIS, EXT_NORMAL, "dec (ix+<i>d</i>)", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts one from the memory location pointed to by IX plus <i>d</i>." },
{ "ld", "(ix+%1),%1", "  DD  36  <i>d</i> <i>n</i> ", 4, "19", MODE_N, EXT_NORMAL, "ld (ix+<i>d</i>),<i>n</i>", "", "Stores <i>n</i> to the memory location pointed to by IX plus <i>d</i>." },
INVALID,
INVALID,
{ "add", "ix,sp", "  DD  39  ", 2, "15", MODE_IMP, EXT_NORMAL, "add ix,sp", "C: as defined<br>N: as defined<br>H: as defined<br>", "The value of SP is added to IX." },
INVALID,
INVALID,
{ "inc", "a", "  DD  3C  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "inc a", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds one to r." },
{ "dec", "a", "  DD  3D  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "dec a", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts one from A." },
{ "ld", "a,%1", "  DD  3E  <i>n</i> ", 3, "11", MODE_N, EXT_UNDOCUMENTED, "ld a,<i>n</i>", "", "Loads <i>n</i> into A." },
INVALID,
{ "ld", "b,b", "  DD  40  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld b,b", "", "The contents of B are loaded into B." },
{ "ld", "b,c", "  DD  41  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld b,c", "", "The contents of C are loaded into B." },
{ "ld", "b,d", "  DD  42  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld b,d", "", "The contents of D are loaded into B." },
{ "ld", "b,e", "  DD  43  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld b,e", "", "The contents of E are loaded into B." },
{ "ld", "b,ixh", "  DD  44  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld b,ixh", "", "The contents of IXH are loaded into B." },
{ "ld", "b,ixl", "  DD  45  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld b,ixl", "", "The contents of IXL are loaded into B." },
{ "ld", "b,(ix+%1)", "  DD  46  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "ld b,(ix+<i>d</i>)", "", "Loads the value pointed to by IX plus <i>d</i> into B." },
{ "ld", "b,a", "  DD  47  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld b,a", "", "The contents of A are loaded into B." },
{ "ld", "c,b", "  DD  48  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld c,b", "", "The contents of B are loaded into C." },
{ "ld", "c,c", "  DD  49  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld c,c", "", "The contents of C are loaded into C." },
{ "ld", "c,d", "  DD  4A  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld c,d", "", "The contents of D are loaded into C." },
{ "ld", "c,e", "  DD  4B  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld c,e", "", "The contents of E are loaded into C." },
{ "ld", "c,ixh", "  DD  4C  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld c,ixh", "", "The contents of IXH are loaded into C." },
{ "ld", "c,ixl", "  DD  4D  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld c,ixl", "", "The contents of IXL are loaded into C." },
{ "ld", "c,(ix+%1)", "  DD  4E  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "ld c,(ix+<i>d</i>)", "", "Loads the value pointed to by IX plus <i>d</i> into C." },
{ "ld", "c,a", "  DD  4F  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld c,a", "", "The contents of A are loaded into C." },
{ "ld", "d,b", "  DD  50  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld d,b", "", "The contents of B are loaded into D." },
{ "ld", "d,c", "  DD  51  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld d,c", "", "The contents of C are loaded into D." },
{ "ld", "d,d", "  DD  52  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld d,d", "", "The contents of D are loaded into D." },
{ "ld", "d,e", "  DD  53  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld d,e", "", "The contents of E are loaded into D." },
{ "ld", "d,ixh", "  DD  54  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld d,ixh", "", "The contents of IXH are loaded into D." },
{ "ld", "d,ixl", "  DD  55  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld d,ixl", "", "The contents of IXL are loaded into D." },
{ "ld", "d,(ix+%1)", "  DD  56  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "ld d,(ix+<i>d</i>)", "", "Loads the value pointed to by IX plus <i>d</i> into D." },
{ "ld", "d,a", "  DD  57  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld d,a", "", "The contents of A are loaded into D." },
{ "ld", "e,b", "  DD  58  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld e,b", "", "The contents of B are loaded into E." },
{ "ld", "e,c", "  DD  59  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld e,c", "", "The contents of C are loaded into E." },
{ "ld", "e,d", "  DD  5A  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld e,d", "", "The contents of D are loaded into E." },
{ "ld", "e,e", "  DD  5B  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld e,e", "", "The contents of E are loaded into E." },
{ "ld", "e,ixh", "  DD  5C  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld e,ixh", "", "The contents of IXH are loaded into E." },
{ "ld", "e,ixl", "  DD  5D  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld e,ixl", "", "The contents of IXL are loaded into E." },
{ "ld", "e,(ix+%1)", "  DD  5E  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "ld e,(ix+<i>d</i>)", "", "Loads the value pointed to by IX plus <i>d</i> into E." },
{ "ld", "e,a", "  DD  5F  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld e,a", "", "The contents of A are loaded into E." },
{ "ld", "ixh,b", "  DD  60  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld ixh,b", "", "The contents of B are loaded into IXH." },
{ "ld", "ixh,c", "  DD  61  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld ixh,c", "", "The contents of C are loaded into IXH." },
{ "ld", "ixh,d", "  DD  62  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld ixh,d", "", "The contents of D are loaded into IXH." },
{ "ld", "ixh,e", "  DD  63  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld ixh,e", "", "The contents of E are loaded into IXH." },
{ "ld", "ixh,ixh", "  DD  64  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld ixh,ixh", "", "The contents of IXH are loaded into IXH." },
{ "ld", "ixh,ixl", "  DD  65  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld ixh,ixl", "", "The contents of IXL are loaded into IXH." },
{ "ld", "h,(ix+%1)", "  DD  66  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "ld h,(ix+<i>d</i>)", "", "Loads the value pointed to by IX plus <i>d</i> into H." },
{ "ld", "ixh,a", "  DD  67  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld ixh,a", "", "The contents of A are loaded into IXH." },
{ "ld", "ixl,b", "  DD  68  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld ixl,b", "", "The contents of B are loaded into IXL." },
{ "ld", "ixl,c", "  DD  69  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld ixl,c", "", "The contents of C are loaded into IXL." },
{ "ld", "ixl,d", "  DD  6A  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld ixl,d", "", "The contents of D are loaded into IXL." },
{ "ld", "ixl,e", "  DD  6B  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld ixl,e", "", "The contents of E are loaded into IXL." },
{ "ld", "ixl,ixh", "  DD  6C  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld ixl,ixh", "", "The contents of IXH are loaded into IXL." },
{ "ld", "ixl,ixl", "  DD  6D  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld ixl,ixl", "", "The contents of IXL are loaded into IXL." },
{ "ld", "l,(ix+%1)", "  DD  6E  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "ld l,(ix+<i>d</i>)", "", "Loads the value pointed to by IX plus <i>d</i> into L." },
{ "ld", "ixl,a", "  DD  6F  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld ixl,a", "", "The contents of A are loaded into IXL." },
{ "ld", "(ix+%1),b", "  DD  70  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "ld (ix+<i>d</i>),b", "", "Stores B to the memory location pointed to by IX plus <i>d</i>." },
{ "ld", "(ix+%1),c", "  DD  71  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "ld (ix+<i>d</i>),c", "", "Stores C to the memory location pointed to by IX plus <i>d</i>." },
{ "ld", "(ix+%1),d", "  DD  72  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "ld (ix+<i>d</i>),d", "", "Stores D to the memory location pointed to by IX plus <i>d</i>." },
{ "ld", "(ix+%1),e", "  DD  73  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "ld (ix+<i>d</i>),e", "", "Stores E to the memory location pointed to by IX plus <i>d</i>." },
{ "ld", "(ix+%1),h", "  DD  74  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "ld (ix+<i>d</i>),h", "", "Stores H to the memory location pointed to by IX plus <i>d</i>." },
{ "ld", "(ix+%1),l", "  DD  75  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "ld (ix+<i>d</i>),l", "", "Stores L to the memory location pointed to by IX plus <i>d</i>." },
INVALID,
{ "ld", "(ix+%1),a", "  DD  77  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "ld (ix+<i>d</i>),a", "", "Stores A to the memory location pointed to by IX plus <i>d</i>." },
{ "ld", "a,b", "  DD  78  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld a,b", "", "The contents of B are loaded into A." },
{ "ld", "a,c", "  DD  79  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld a,c", "", "The contents of C are loaded into A." },
{ "ld", "a,d", "  DD  7A  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld a,d", "", "The contents of D are loaded into A." },
{ "ld", "a,e", "  DD  7B  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld a,e", "", "The contents of E are loaded into A." },
{ "ld", "a,ixh", "  DD  7C  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld a,ixh", "", "The contents of IXH are loaded into A." },
{ "ld", "a,ixl", "  DD  7D  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld a,ixl", "", "The contents of IXL are loaded into A." },
{ "ld", "a,(ix+%1)", "  DD  7E  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "ld a,(ix+<i>d</i>)", "", "Loads the value pointed to by IX plus <i>d</i> into A." },
{ "ld", "a,a", "  DD  7F  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld a,a", "", "The contents of A are loaded into A." },
{ "add", "a,b", "  DD  80  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "add a,b", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds B to A." },
{ "add", "a,c", "  DD  81  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "add a,c", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds C to A." },
{ "add", "a,d", "  DD  82  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "add a,d", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds D to A." },
{ "add", "a,e", "  DD  83  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "add a,e", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds E to A." },
{ "add", "a,ixh", "  DD  84  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "add a,ixh", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds IXH to A." },
{ "add", "a,ixl", "  DD  85  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "add a,ixl", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds IXL to A." },
{ "add", "a,(ix+%1)", "  DD  86  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "add a,(ix+<i>d</i>)", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds the value pointed to by IX plus <i>d</i> to A." },
{ "add", "a,a", "  DD  87  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "add a,a", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds A to A." },
{ "adc", "a,b", "  DD  88  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "adc a,b", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds B and the carry flag to A." },
{ "adc", "a,c", "  DD  89  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "adc a,c", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds C and the carry flag to A." },
{ "adc", "a,d", "  DD  8A  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "adc a,d", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds D and the carry flag to A." },
{ "adc", "a,e", "  DD  8B  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "adc a,e", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds E and the carry flag to A." },
{ "adc", "a,ixh", "  DD  8C  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "adc a,ixh", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds IXH and the carry flag to A." },
{ "adc", "a,ixl", "  DD  8D  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "adc a,ixl", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds IXL and the carry flag to A." },
{ "adc", "a,(ix+%1)", "  DD  8E  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "adc a,(ix+<i>d</i>)", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds the value pointed to by IX plus <i>d</i> and the carry flag to A." },
{ "adc", "a,a", "  DD  8F  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "adc a,a", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds A and the carry flag to A." },
{ "sub", "b", "  DD  90  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sub b", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts B from A." },
{ "sub", "c", "  DD  91  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sub c", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts C from A." },
{ "sub", "d", "  DD  92  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sub d", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts D from A." },
{ "sub", "e", "  DD  93  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sub e", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts E from A." },
{ "sub", "ixh", "  DD  94  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sub ixh", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts IXH from A." },
{ "sub", "ixl", "  DD  95  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sub ixl", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts IXL from A." },
{ "sub", "(ix+%1)", "  DD  96  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "sub (ix+<i>d</i>)", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts the value pointed to by IX plus <i>d</i> from A." },
{ "sub", "a", "  DD  97  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sub a", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts A from A." },
{ "sbc", "a,b", "  DD  98  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sbc a,b", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts B and the carry flag from A." },
{ "sbc", "a,c", "  DD  99  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sbc a,c", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts C and the carry flag from A." },
{ "sbc", "a,d", "  DD  9A  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sbc a,d", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts D and the carry flag from A." },
{ "sbc", "a,e", "  DD  9B  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sbc a,e", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts E and the carry flag from A." },
{ "sbc", "a,ixh", "  DD  9C  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sbc a,ixh", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts IXH and the carry flag from A." },
{ "sbc", "a,ixl", "  DD  9D  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sbc a,ixl", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts IXL and the carry flag from A." },
{ "sbc", "a,(ix+%1)", "  DD  9E  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "sbc a,(ix+<i>d</i>)", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts the value pointed to by IX plus <i>d</i> and the carry flag from A." },
{ "sbc", "a,a", "  DD  9F  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sbc a,a", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts A and the carry flag from A." },
{ "and", "b", "  DD  A0  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "and b", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Bitwise AND on A with B." },
{ "and", "c", "  DD  A1  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "and c", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Bitwise AND on A with C." },
{ "and", "d", "  DD  A2  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "and d", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Bitwise AND on A with D." },
{ "and", "e", "  DD  A3  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "and e", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Bitwise AND on A with E." },
{ "and", "ixh", "  DD  A4  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "and ixh", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Bitwise AND on A with IXH." },
{ "and", "ixl", "  DD  A5  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "and ixl", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Bitwise AND on A with IXL." },
{ "and", "(ix+%1)", "  DD  A6  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "and (ix+<i>d</i>)", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Bitwise AND on A with the value pointed to by IX plus <i>d</i>." },
{ "and", "a", "  DD  A7  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "and a", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Bitwise AND on A with A." },
{ "xor", "b", "  DD  A8  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "xor b", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise XOR on A with B." },
{ "xor", "c", "  DD  A9  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "xor c", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise XOR on A with C." },
{ "xor", "d", "  DD  AA  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "xor d", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise XOR on A with D." },
{ "xor", "e", "  DD  AB  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "xor e", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise XOR on A with E." },
{ "xor", "ixh", "  DD  AC  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "xor ixh", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise XOR on A with IXH." },
{ "xor", "ixl", "  DD  AD  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "xor ixl", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise XOR on A with IXL." },
{ "xor", "(ix+%1)", "  DD  AE  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "xor (ix+<i>d</i>)", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise XOR on A with the value pointed to by IX plus <i>d</i>." },
{ "xor", "a", "  DD  AF  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "xor a", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise XOR on A with A." },
{ "or", "b", "  DD  B0  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "or b", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise OR on A with r." },
{ "or", "c", "  DD  B1  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "or c", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise OR on A with r." },
{ "or", "d", "  DD  B2  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "or d", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise OR on A with r." },
{ "or", "e", "  DD  B3  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "or e", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise OR on A with r." },
{ "or", "ixh", "  DD  B4  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "or ixh", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise OR on A with r." },
{ "or", "ixl", "  DD  B5  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "or ixl", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise OR on A with r." },
{ "or", "(ix+%1)", "  DD  B6  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "or (ix+<i>d</i>)", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise OR on A with the value pointed to by IX plus <i>d</i>." },
{ "or", "a", "  DD  B7  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "or a", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise OR on A with r." },
{ "cp", "b", "  DD  B8  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "cp b", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts B from A and affects flags according to the result. A is not modified." },
{ "cp", "c", "  DD  B9  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "cp c", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts C from A and affects flags according to the result. A is not modified." },
{ "cp", "d", "  DD  BA  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "cp d", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts D from A and affects flags according to the result. A is not modified." },
{ "cp", "e", "  DD  BB  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "cp e", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts E from A and affects flags according to the result. A is not modified." },
{ "cp", "ixh", "  DD  BC  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "cp ixh", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts IXH from A and affects flags according to the result. A is not modified." },
{ "cp", "ixl", "  DD  BD  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "cp ixl", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts IXL from A and affects flags according to the result. A is not modified." },
{ "cp", "(ix+%1)", "  DD  BE  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "cp (ix+<i>d</i>)", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts the value pointed to by IX plus <i>d</i> from A and affects flags according to the result. A is not modified." },
{ "cp", "a", "  DD  BF  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "cp a", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts A from A and affects flags according to the result. A is not modified." },
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
{ "pop", "ix", "  DD  E1  ", 2, "14", MODE_IMP, EXT_NORMAL, "pop ix", "", "The memory location pointed to by SP is stored into IXL and SP is incremented. The memory location pointed to by SP is stored into IXH and SP is incremented again." },
INVALID,
{ "ex", "(sp),ix", "  DD  E3  ", 2, "23", MODE_IMP, EXT_NORMAL, "ex (sp),ix", "", "Exchanges (SP) with IXL, and (SP+1) with IXH." },
INVALID,
{ "push", "ix", "  DD  E5  ", 2, "15", MODE_IMP, EXT_NORMAL, "push ix", "", "SP is decremented and IXH is stored into the memory location pointed to by SP. SP is decremented again and IXL is stored into the memory location pointed to by SP." },
INVALID,
INVALID,
INVALID,
{ "jp", "(ix)", "  DD  E9  ", 2, "8", MODE_IMP, EXT_JUMP, "jp (ix)", "", "Loads the value of IX into PC." },
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
{ "ld", "sp,ix", "  DD  F9  ", 2, "10", MODE_IMP, EXT_NORMAL, "ld sp,ix", "", "Loads the value of IX into SP." },
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
};

static struct distabitem distab_DDCB[256] = {
{ "rlc", "(ix+%1),b", "  DD  CB  <i>d</i>  00  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rlc (ix+<i>d</i>),b", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0. The result is then stored in B." },
{ "rlc", "(ix+%1),c", "  DD  CB  <i>d</i>  01  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rlc (ix+<i>d</i>),c", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0. The result is then stored in C." },
{ "rlc", "(ix+%1),d", "  DD  CB  <i>d</i>  02  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rlc (ix+<i>d</i>),d", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0. The result is then stored in D." },
{ "rlc", "(ix+%1),e", "  DD  CB  <i>d</i>  03  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rlc (ix+<i>d</i>),e", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0. The result is then stored in E." },
{ "rlc", "(ix+%1),h", "  DD  CB  <i>d</i>  04  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rlc (ix+<i>d</i>),h", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0. The result is then stored in H." },
{ "rlc", "(ix+%1),l", "  DD  CB  <i>d</i>  05  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rlc (ix+<i>d</i>),l", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0. The result is then stored in L." },
{ "rlc", "(ix+%1)", "  DD  CB  <i>d</i>  06  ", 4, "23", MODE_DIS, EXT_NORMAL, "rlc (ix+<i>d</i>)", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0." },
{ "rlc", "(ix+%1),a", "  DD  CB  <i>d</i>  07  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rlc (ix+<i>d</i>),a", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0. The result is then stored in A." },
{ "rrc", "(ix+%1),b", "  DD  CB  <i>d</i>  08  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rrc (ix+<i>d</i>),b", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7. The result is then stored in B." },
{ "rrc", "(ix+%1),c", "  DD  CB  <i>d</i>  09  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rrc (ix+<i>d</i>),c", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7. The result is then stored in C." },
{ "rrc", "(ix+%1),d", "  DD  CB  <i>d</i>  0A  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rrc (ix+<i>d</i>),d", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7. The result is then stored in D." },
{ "rrc", "(ix+%1),e", "  DD  CB  <i>d</i>  0B  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rrc (ix+<i>d</i>),e", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7. The result is then stored in E." },
{ "rrc", "(ix+%1),h", "  DD  CB  <i>d</i>  0C  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rrc (ix+<i>d</i>),h", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7. The result is then stored in H." },
{ "rrc", "(ix+%1),l", "  DD  CB  <i>d</i>  0D  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rrc (ix+<i>d</i>),l", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7. The result is then stored in L." },
{ "rrc", "(ix+%1)", "  DD  CB  <i>d</i>  0E  ", 4, "23", MODE_DIS, EXT_NORMAL, "rrc (ix+<i>d</i>)", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7." },
{ "rrc", "(ix+%1),a", "  DD  CB  <i>d</i>  0F  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rrc (ix+<i>d</i>),a", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7. The result is then stored in A." },
{ "rl", "(ix+%1),b", "  DD  CB  <i>d</i>  10  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rl (ix+<i>d</i>),b", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0. The result is then stored in B." },
{ "rl", "(ix+%1),c", "  DD  CB  <i>d</i>  11  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rl (ix+<i>d</i>),c", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0. The result is then stored in C." },
{ "rl", "(ix+%1),d", "  DD  CB  <i>d</i>  12  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rl (ix+<i>d</i>),d", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0. The result is then stored in D." },
{ "rl", "(ix+%1),e", "  DD  CB  <i>d</i>  13  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rl (ix+<i>d</i>),e", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0. The result is then stored in E." },
{ "rl", "(ix+%1),h", "  DD  CB  <i>d</i>  14  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rl (ix+<i>d</i>),h", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0. The result is then stored in H." },
{ "rl", "(ix+%1),l", "  DD  CB  <i>d</i>  15  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rl (ix+<i>d</i>),l", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0. The result is then stored in L." },
{ "rl", "(ix+%1)", "  DD  CB  <i>d</i>  16  ", 4, "23", MODE_DIS, EXT_NORMAL, "rl (ix+<i>d</i>)", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0." },
{ "rl", "(ix+%1),a", "  DD  CB  <i>d</i>  17  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rl (ix+<i>d</i>),a", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0. The result is then stored in A." },
{ "rr", "(ix+%1),b", "  DD  CB  <i>d</i>  18  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rr (ix+<i>d</i>),b", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7. The result is then stored in B." },
{ "rr", "(ix+%1),c", "  DD  CB  <i>d</i>  19  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rr (ix+<i>d</i>),c", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7. The result is then stored in C." },
{ "rr", "(ix+%1),d", "  DD  CB  <i>d</i>  1A  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rr (ix+<i>d</i>),d", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7. The result is then stored in D." },
{ "rr", "(ix+%1),e", "  DD  CB  <i>d</i>  1B  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rr (ix+<i>d</i>),e", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7. The result is then stored in E." },
{ "rr", "(ix+%1),h", "  DD  CB  <i>d</i>  1C  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rr (ix+<i>d</i>),h", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7. The result is then stored in H." },
{ "rr", "(ix+%1),l", "  DD  CB  <i>d</i>  1D  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rr (ix+<i>d</i>),l", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7. The result is then stored in L." },
{ "rr", "(ix+%1)", "  DD  CB  <i>d</i>  1E  ", 4, "23", MODE_DIS, EXT_NORMAL, "rr (ix+<i>d</i>)", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7." },
{ "rr", "(ix+%1),a", "  DD  CB  <i>d</i>  1F  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rr (ix+<i>d</i>),a", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7. The result is then stored in A." },
{ "sla", "(ix+%1),b", "  DD  CB  <i>d</i>  20  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sla (ix+<i>d</i>),b", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0. The result is then stored in B." },
{ "sla", "(ix+%1),c", "  DD  CB  <i>d</i>  21  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sla (ix+<i>d</i>),c", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0. The result is then stored in C." },
{ "sla", "(ix+%1),d", "  DD  CB  <i>d</i>  22  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sla (ix+<i>d</i>),d", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0. The result is then stored in D." },
{ "sla", "(ix+%1),e", "  DD  CB  <i>d</i>  23  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sla (ix+<i>d</i>),e", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0. The result is then stored in E." },
{ "sla", "(ix+%1),h", "  DD  CB  <i>d</i>  24  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sla (ix+<i>d</i>),h", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0. The result is then stored in H." },
{ "sla", "(ix+%1),l", "  DD  CB  <i>d</i>  25  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sla (ix+<i>d</i>),l", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0. The result is then stored in L." },
{ "sla", "(ix+%1)", "  DD  CB  <i>d</i>  26  ", 4, "23", MODE_DIS, EXT_NORMAL, "sla (ix+<i>d</i>)", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0." },
{ "sla", "(ix+%1),a", "  DD  CB  <i>d</i>  27  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sla (ix+<i>d</i>),a", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0. The result is then stored in A." },
{ "sra", "(ix+%1),b", "  DD  CB  <i>d</i>  28  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sra (ix+<i>d</i>),b", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged. The result is then stored in B." },
{ "sra", "(ix+%1),c", "  DD  CB  <i>d</i>  29  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sra (ix+<i>d</i>),c", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged. The result is then stored in C." },
{ "sra", "(ix+%1),d", "  DD  CB  <i>d</i>  2A  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sra (ix+<i>d</i>),d", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged. The result is then stored in D." },
{ "sra", "(ix+%1),e", "  DD  CB  <i>d</i>  2B  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sra (ix+<i>d</i>),e", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged. The result is then stored in E." },
{ "sra", "(ix+%1),h", "  DD  CB  <i>d</i>  2C  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sra (ix+<i>d</i>),h", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged. The result is then stored in H." },
{ "sra", "(ix+%1),l", "  DD  CB  <i>d</i>  2D  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sra (ix+<i>d</i>),l", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged. The result is then stored in L." },
{ "sra", "(ix+%1)", "  DD  CB  <i>d</i>  2E  ", 4, "23", MODE_DIS, EXT_NORMAL, "sra (ix+<i>d</i>)", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged." },
{ "sra", "(ix+%1),a", "  DD  CB  <i>d</i>  2F  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sra (ix+<i>d</i>),a", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged. The result is then stored in A." },
{ "sll", "(ix+%1),b", "  DD  CB  <i>d</i>  30  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sll (ix+<i>d</i>),b", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0. The result is then stored in B." },
{ "sll", "(ix+%1),c", "  DD  CB  <i>d</i>  31  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sll (ix+<i>d</i>),c", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0. The result is then stored in C." },
{ "sll", "(ix+%1),d", "  DD  CB  <i>d</i>  32  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sll (ix+<i>d</i>),d", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0. The result is then stored in D." },
{ "sll", "(ix+%1),e", "  DD  CB  <i>d</i>  33  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sll (ix+<i>d</i>),e", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0. The result is then stored in E." },
{ "sll", "(ix+%1),h", "  DD  CB  <i>d</i>  34  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sll (ix+<i>d</i>),h", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0. The result is then stored in H." },
{ "sll", "(ix+%1),l", "  DD  CB  <i>d</i>  35  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sll (ix+<i>d</i>),l", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0. The result is then stored in L." },
{ "sll", "(ix+%1)", "  DD  CB  <i>d</i>  36  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sll (ix+<i>d</i>)", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0." },
{ "sll", "(ix+%1),a", "  DD  CB  <i>d</i>  37  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sll (ix+<i>d</i>),a", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0. The result is then stored in A." },
{ "srl", "(ix+%1),b", "  DD  CB  <i>d</i>  38  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "srl (ix+<i>d</i>),b", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7. The result is then stored in B." },
{ "srl", "(ix+%1),c", "  DD  CB  <i>d</i>  39  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "srl (ix+<i>d</i>),c", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7. The result is then stored in C." },
{ "srl", "(ix+%1),d", "  DD  CB  <i>d</i>  3A  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "srl (ix+<i>d</i>),d", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7. The result is then stored in D." },
{ "srl", "(ix+%1),e", "  DD  CB  <i>d</i>  3B  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "srl (ix+<i>d</i>),e", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7. The result is then stored in E." },
{ "srl", "(ix+%1),h", "  DD  CB  <i>d</i>  3C  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "srl (ix+<i>d</i>),h", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7. The result is then stored in H." },
{ "srl", "(ix+%1),l", "  DD  CB  <i>d</i>  3D  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "srl (ix+<i>d</i>),l", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7. The result is then stored in L." },
{ "srl", "(ix+%1)", "  DD  CB  <i>d</i>  3E  ", 4, "23", MODE_DIS, EXT_NORMAL, "srl (ix+<i>d</i>)", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7." },
{ "srl", "(ix+%1),a", "  DD  CB  <i>d</i>  3F  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "srl (ix+<i>d</i>),a", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IX plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7. The result is then stored in A." },
{ "bit", "0,(ix+%1)", "  DD  CB  <i>d</i>  40  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 0,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 0 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "0,(ix+%1)", "  DD  CB  <i>d</i>  41  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 0,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 0 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "0,(ix+%1)", "  DD  CB  <i>d</i>  42  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 0,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 0 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "0,(ix+%1)", "  DD  CB  <i>d</i>  43  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 0,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 0 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "0,(ix+%1)", "  DD  CB  <i>d</i>  44  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 0,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 0 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "0,(ix+%1)", "  DD  CB  <i>d</i>  45  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 0,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 0 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "0,(ix+%1)", "  DD  CB  <i>d</i>  46  ", 4, "20", MODE_DIS, EXT_NORMAL, "bit 0,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 0 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "0,(ix+%1)", "  DD  CB  <i>d</i>  47  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 0,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 0 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "1,(ix+%1)", "  DD  CB  <i>d</i>  48  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 1,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 1 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "1,(ix+%1)", "  DD  CB  <i>d</i>  49  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 1,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 1 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "1,(ix+%1)", "  DD  CB  <i>d</i>  4A  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 1,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 1 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "1,(ix+%1)", "  DD  CB  <i>d</i>  4B  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 1,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 1 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "1,(ix+%1)", "  DD  CB  <i>d</i>  4C  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 1,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 1 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "1,(ix+%1)", "  DD  CB  <i>d</i>  4D  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 1,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 1 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "1,(ix+%1)", "  DD  CB  <i>d</i>  4E  ", 4, "20", MODE_DIS, EXT_NORMAL, "bit 1,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 1 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "1,(ix+%1)", "  DD  CB  <i>d</i>  4F  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 1,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 1 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "2,(ix+%1)", "  DD  CB  <i>d</i>  50  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 2,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 2 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "2,(ix+%1)", "  DD  CB  <i>d</i>  51  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 2,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 2 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "2,(ix+%1)", "  DD  CB  <i>d</i>  52  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 2,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 2 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "2,(ix+%1)", "  DD  CB  <i>d</i>  53  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 2,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 2 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "2,(ix+%1)", "  DD  CB  <i>d</i>  54  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 2,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 2 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "2,(ix+%1)", "  DD  CB  <i>d</i>  55  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 2,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 2 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "2,(ix+%1)", "  DD  CB  <i>d</i>  56  ", 4, "20", MODE_DIS, EXT_NORMAL, "bit 2,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 2 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "2,(ix+%1)", "  DD  CB  <i>d</i>  57  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 2,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 2 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "3,(ix+%1)", "  DD  CB  <i>d</i>  58  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 3,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 3 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "3,(ix+%1)", "  DD  CB  <i>d</i>  59  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 3,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 3 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "3,(ix+%1)", "  DD  CB  <i>d</i>  5A  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 3,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 3 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "3,(ix+%1)", "  DD  CB  <i>d</i>  5B  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 3,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 3 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "3,(ix+%1)", "  DD  CB  <i>d</i>  5C  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 3,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 3 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "3,(ix+%1)", "  DD  CB  <i>d</i>  5D  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 3,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 3 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "3,(ix+%1)", "  DD  CB  <i>d</i>  5E  ", 4, "20", MODE_DIS, EXT_NORMAL, "bit 3,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 3 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "3,(ix+%1)", "  DD  CB  <i>d</i>  5F  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 3,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 3 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "4,(ix+%1)", "  DD  CB  <i>d</i>  60  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 4,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 4 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "4,(ix+%1)", "  DD  CB  <i>d</i>  61  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 4,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 4 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "4,(ix+%1)", "  DD  CB  <i>d</i>  62  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 4,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 4 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "4,(ix+%1)", "  DD  CB  <i>d</i>  63  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 4,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 4 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "4,(ix+%1)", "  DD  CB  <i>d</i>  64  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 4,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 4 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "4,(ix+%1)", "  DD  CB  <i>d</i>  65  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 4,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 4 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "4,(ix+%1)", "  DD  CB  <i>d</i>  66  ", 4, "20", MODE_DIS, EXT_NORMAL, "bit 4,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 4 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "4,(ix+%1)", "  DD  CB  <i>d</i>  67  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 4,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 4 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "5,(ix+%1)", "  DD  CB  <i>d</i>  68  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 5,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 5 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "5,(ix+%1)", "  DD  CB  <i>d</i>  69  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 5,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 5 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "5,(ix+%1)", "  DD  CB  <i>d</i>  6A  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 5,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 5 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "5,(ix+%1)", "  DD  CB  <i>d</i>  6B  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 5,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 5 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "5,(ix+%1)", "  DD  CB  <i>d</i>  6C  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 5,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 5 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "5,(ix+%1)", "  DD  CB  <i>d</i>  6D  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 5,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 5 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "5,(ix+%1)", "  DD  CB  <i>d</i>  6E  ", 4, "20", MODE_DIS, EXT_NORMAL, "bit 5,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 5 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "5,(ix+%1)", "  DD  CB  <i>d</i>  6F  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 5,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 5 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "6,(ix+%1)", "  DD  CB  <i>d</i>  70  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 6,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 6 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "6,(ix+%1)", "  DD  CB  <i>d</i>  71  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 6,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 6 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "6,(ix+%1)", "  DD  CB  <i>d</i>  72  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 6,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 6 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "6,(ix+%1)", "  DD  CB  <i>d</i>  73  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 6,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 6 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "6,(ix+%1)", "  DD  CB  <i>d</i>  74  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 6,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 6 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "6,(ix+%1)", "  DD  CB  <i>d</i>  75  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 6,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 6 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "6,(ix+%1)", "  DD  CB  <i>d</i>  76  ", 4, "20", MODE_DIS, EXT_NORMAL, "bit 6,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 6 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "6,(ix+%1)", "  DD  CB  <i>d</i>  77  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 6,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 6 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "7,(ix+%1)", "  DD  CB  <i>d</i>  78  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 7,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 7 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "7,(ix+%1)", "  DD  CB  <i>d</i>  79  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 7,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 7 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "7,(ix+%1)", "  DD  CB  <i>d</i>  7A  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 7,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 7 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "7,(ix+%1)", "  DD  CB  <i>d</i>  7B  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 7,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 7 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "7,(ix+%1)", "  DD  CB  <i>d</i>  7C  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 7,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 7 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "7,(ix+%1)", "  DD  CB  <i>d</i>  7D  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 7,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 7 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "7,(ix+%1)", "  DD  CB  <i>d</i>  7E  ", 4, "20", MODE_DIS, EXT_NORMAL, "bit 7,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 7 of the memory location pointed to by IX plus <i>d</i>." },
{ "bit", "7,(ix+%1)", "  DD  CB  <i>d</i>  7F  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 7,(ix+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 7 of the memory location pointed to by IX plus <i>d</i>." },
{ "res", "0,(ix+%1),b", "  DD  CB  <i>d</i>  80  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 0,(ix+<i>d</i>),b", "", "Resets bit 0 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in B." },
{ "res", "0,(ix+%1),c", "  DD  CB  <i>d</i>  81  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 0,(ix+<i>d</i>),c", "", "Resets bit 0 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in C." },
{ "res", "0,(ix+%1),d", "  DD  CB  <i>d</i>  82  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 0,(ix+<i>d</i>),d", "", "Resets bit 0 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in D." },
{ "res", "0,(ix+%1),e", "  DD  CB  <i>d</i>  83  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 0,(ix+<i>d</i>),e", "", "Resets bit 0 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in E." },
{ "res", "0,(ix+%1),h", "  DD  CB  <i>d</i>  84  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 0,(ix+<i>d</i>),h", "", "Resets bit 0 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in H." },
{ "res", "0,(ix+%1),l", "  DD  CB  <i>d</i>  85  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 0,(ix+<i>d</i>),l", "", "Resets bit 0 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in L." },
{ "res", "0,(ix+%1)", "  DD  CB  <i>d</i>  86  ", 4, "23", MODE_DIS, EXT_NORMAL, "res 0,(ix+<i>d</i>)", "", "Resets bit 0 of the memory location pointed to by IX plus <i>d</i>." },
{ "res", "0,(ix+%1),a", "  DD  CB  <i>d</i>  87  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 0,(ix+<i>d</i>),a", "", "Resets bit 0 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in A." },
{ "res", "1,(ix+%1),b", "  DD  CB  <i>d</i>  88  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 1,(ix+<i>d</i>),b", "", "Resets bit 1 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in B." },
{ "res", "1,(ix+%1),c", "  DD  CB  <i>d</i>  89  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 1,(ix+<i>d</i>),c", "", "Resets bit 1 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in C." },
{ "res", "1,(ix+%1),d", "  DD  CB  <i>d</i>  8A  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 1,(ix+<i>d</i>),d", "", "Resets bit 1 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in D." },
{ "res", "1,(ix+%1),e", "  DD  CB  <i>d</i>  8B  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 1,(ix+<i>d</i>),e", "", "Resets bit 1 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in E." },
{ "res", "1,(ix+%1),h", "  DD  CB  <i>d</i>  8C  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 1,(ix+<i>d</i>),h", "", "Resets bit 1 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in H." },
{ "res", "1,(ix+%1),l", "  DD  CB  <i>d</i>  8D  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 1,(ix+<i>d</i>),l", "", "Resets bit 1 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in L." },
{ "res", "1,(ix+%1)", "  DD  CB  <i>d</i>  8E  ", 4, "23", MODE_DIS, EXT_NORMAL, "res 1,(ix+<i>d</i>)", "", "Resets bit 1 of the memory location pointed to by IX plus <i>d</i>." },
{ "res", "1,(ix+%1),a", "  DD  CB  <i>d</i>  8F  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 1,(ix+<i>d</i>),a", "", "Resets bit 1 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in A." },
{ "res", "2,(ix+%1),b", "  DD  CB  <i>d</i>  90  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 2,(ix+<i>d</i>),b", "", "Resets bit 2 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in B." },
{ "res", "2,(ix+%1),c", "  DD  CB  <i>d</i>  91  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 2,(ix+<i>d</i>),c", "", "Resets bit 2 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in C." },
{ "res", "2,(ix+%1),d", "  DD  CB  <i>d</i>  92  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 2,(ix+<i>d</i>),d", "", "Resets bit 2 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in D." },
{ "res", "2,(ix+%1),e", "  DD  CB  <i>d</i>  93  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 2,(ix+<i>d</i>),e", "", "Resets bit 2 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in E." },
{ "res", "2,(ix+%1),h", "  DD  CB  <i>d</i>  94  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 2,(ix+<i>d</i>),h", "", "Resets bit 2 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in H." },
{ "res", "2,(ix+%1),l", "  DD  CB  <i>d</i>  95  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 2,(ix+<i>d</i>),l", "", "Resets bit 2 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in L." },
{ "res", "2,(ix+%1)", "  DD  CB  <i>d</i>  96  ", 4, "23", MODE_DIS, EXT_NORMAL, "res 2,(ix+<i>d</i>)", "", "Resets bit 2 of the memory location pointed to by IX plus <i>d</i>." },
{ "res", "2,(ix+%1),a", "  DD  CB  <i>d</i>  97  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 2,(ix+<i>d</i>),a", "", "Resets bit 2 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in A." },
{ "res", "3,(ix+%1),b", "  DD  CB  <i>d</i>  98  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 3,(ix+<i>d</i>),b", "", "Resets bit 3 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in B." },
{ "res", "3,(ix+%1),c", "  DD  CB  <i>d</i>  99  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 3,(ix+<i>d</i>),c", "", "Resets bit 3 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in C." },
{ "res", "3,(ix+%1),d", "  DD  CB  <i>d</i>  9A  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 3,(ix+<i>d</i>),d", "", "Resets bit 3 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in D." },
{ "res", "3,(ix+%1),e", "  DD  CB  <i>d</i>  9B  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 3,(ix+<i>d</i>),e", "", "Resets bit 3 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in E." },
{ "res", "3,(ix+%1),h", "  DD  CB  <i>d</i>  9C  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 3,(ix+<i>d</i>),h", "", "Resets bit 3 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in H." },
{ "res", "3,(ix+%1),l", "  DD  CB  <i>d</i>  9D  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 3,(ix+<i>d</i>),l", "", "Resets bit 3 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in L." },
{ "res", "3,(ix+%1)", "  DD  CB  <i>d</i>  9E  ", 4, "23", MODE_DIS, EXT_NORMAL, "res 3,(ix+<i>d</i>)", "", "Resets bit 3 of the memory location pointed to by IX plus <i>d</i>." },
{ "res", "3,(ix+%1),a", "  DD  CB  <i>d</i>  9F  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 3,(ix+<i>d</i>),a", "", "Resets bit 3 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in A." },
{ "res", "4,(ix+%1),b", "  DD  CB  <i>d</i>  A0  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 4,(ix+<i>d</i>),b", "", "Resets bit 4 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in B." },
{ "res", "4,(ix+%1),c", "  DD  CB  <i>d</i>  A1  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 4,(ix+<i>d</i>),c", "", "Resets bit 4 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in C." },
{ "res", "4,(ix+%1),d", "  DD  CB  <i>d</i>  A2  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 4,(ix+<i>d</i>),d", "", "Resets bit 4 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in D." },
{ "res", "4,(ix+%1),e", "  DD  CB  <i>d</i>  A3  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 4,(ix+<i>d</i>),e", "", "Resets bit 4 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in E." },
{ "res", "4,(ix+%1),h", "  DD  CB  <i>d</i>  A4  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 4,(ix+<i>d</i>),h", "", "Resets bit 4 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in H." },
{ "res", "4,(ix+%1),l", "  DD  CB  <i>d</i>  A5  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 4,(ix+<i>d</i>),l", "", "Resets bit 4 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in L." },
{ "res", "4,(ix+%1)", "  DD  CB  <i>d</i>  A6  ", 4, "23", MODE_DIS, EXT_NORMAL, "res 4,(ix+<i>d</i>)", "", "Resets bit 4 of the memory location pointed to by IX plus <i>d</i>." },
{ "res", "4,(ix+%1),a", "  DD  CB  <i>d</i>  A7  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 4,(ix+<i>d</i>),a", "", "Resets bit 4 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in A." },
{ "res", "5,(ix+%1),b", "  DD  CB  <i>d</i>  A8  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 5,(ix+<i>d</i>),b", "", "Resets bit 5 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in B." },
{ "res", "5,(ix+%1),c", "  DD  CB  <i>d</i>  A9  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 5,(ix+<i>d</i>),c", "", "Resets bit 5 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in C." },
{ "res", "5,(ix+%1),d", "  DD  CB  <i>d</i>  AA  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 5,(ix+<i>d</i>),d", "", "Resets bit 5 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in D." },
{ "res", "5,(ix+%1),e", "  DD  CB  <i>d</i>  AB  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 5,(ix+<i>d</i>),e", "", "Resets bit 5 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in E." },
{ "res", "5,(ix+%1),h", "  DD  CB  <i>d</i>  AC  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 5,(ix+<i>d</i>),h", "", "Resets bit 5 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in H." },
{ "res", "5,(ix+%1),l", "  DD  CB  <i>d</i>  AD  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 5,(ix+<i>d</i>),l", "", "Resets bit 5 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in L." },
{ "res", "5,(ix+%1)", "  DD  CB  <i>d</i>  AE  ", 4, "23", MODE_DIS, EXT_NORMAL, "res 5,(ix+<i>d</i>)", "", "Resets bit 5 of the memory location pointed to by IX plus <i>d</i>." },
{ "res", "5,(ix+%1),a", "  DD  CB  <i>d</i>  AF  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 5,(ix+<i>d</i>),a", "", "Resets bit 5 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in A." },
{ "res", "6,(ix+%1),b", "  DD  CB  <i>d</i>  B0  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 6,(ix+<i>d</i>),b", "", "Resets bit 6 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in B." },
{ "res", "6,(ix+%1),c", "  DD  CB  <i>d</i>  B1  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 6,(ix+<i>d</i>),c", "", "Resets bit 6 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in C." },
{ "res", "6,(ix+%1),d", "  DD  CB  <i>d</i>  B2  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 6,(ix+<i>d</i>),d", "", "Resets bit 6 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in D." },
{ "res", "6,(ix+%1),e", "  DD  CB  <i>d</i>  B3  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 6,(ix+<i>d</i>),e", "", "Resets bit 6 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in E." },
{ "res", "6,(ix+%1),h", "  DD  CB  <i>d</i>  B4  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 6,(ix+<i>d</i>),h", "", "Resets bit 6 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in H." },
{ "res", "6,(ix+%1),l", "  DD  CB  <i>d</i>  B5  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 6,(ix+<i>d</i>),l", "", "Resets bit 6 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in L." },
{ "res", "6,(ix+%1)", "  DD  CB  <i>d</i>  B6  ", 4, "23", MODE_DIS, EXT_NORMAL, "res 6,(ix+<i>d</i>)", "", "Resets bit 6 of the memory location pointed to by IX plus <i>d</i>." },
{ "res", "6,(ix+%1),a", "  DD  CB  <i>d</i>  B7  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 6,(ix+<i>d</i>),a", "", "Resets bit 6 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in A." },
{ "res", "7,(ix+%1),b", "  DD  CB  <i>d</i>  B8  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 7,(ix+<i>d</i>),b", "", "Resets bit 7 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in B." },
{ "res", "7,(ix+%1),c", "  DD  CB  <i>d</i>  B9  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 7,(ix+<i>d</i>),c", "", "Resets bit 7 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in C." },
{ "res", "7,(ix+%1),d", "  DD  CB  <i>d</i>  BA  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 7,(ix+<i>d</i>),d", "", "Resets bit 7 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in D." },
{ "res", "7,(ix+%1),e", "  DD  CB  <i>d</i>  BB  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 7,(ix+<i>d</i>),e", "", "Resets bit 7 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in E." },
{ "res", "7,(ix+%1),h", "  DD  CB  <i>d</i>  BC  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 7,(ix+<i>d</i>),h", "", "Resets bit 7 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in H." },
{ "res", "7,(ix+%1),l", "  DD  CB  <i>d</i>  BD  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 7,(ix+<i>d</i>),l", "", "Resets bit 7 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in L." },
{ "res", "7,(ix+%1)", "  DD  CB  <i>d</i>  BE  ", 4, "23", MODE_DIS, EXT_NORMAL, "res 7,(ix+<i>d</i>)", "", "Resets bit 7 of the memory location pointed to by IX plus <i>d</i>." },
{ "res", "7,(ix+%1),a", "  DD  CB  <i>d</i>  BF  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 7,(ix+<i>d</i>),a", "", "Resets bit 7 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in A." },
{ "set", "0,(ix+%1),b", "  DD  CB  <i>d</i>  C0  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 0,(ix+<i>d</i>),b", "", "Sets bit 0 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in B." },
{ "set", "0,(ix+%1),c", "  DD  CB  <i>d</i>  C1  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 0,(ix+<i>d</i>),c", "", "Sets bit 0 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in C." },
{ "set", "0,(ix+%1),d", "  DD  CB  <i>d</i>  C2  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 0,(ix+<i>d</i>),d", "", "Sets bit 0 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in D." },
{ "set", "0,(ix+%1),e", "  DD  CB  <i>d</i>  C3  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 0,(ix+<i>d</i>),e", "", "Sets bit 0 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in E." },
{ "set", "0,(ix+%1),h", "  DD  CB  <i>d</i>  C4  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 0,(ix+<i>d</i>),h", "", "Sets bit 0 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in H." },
{ "set", "0,(ix+%1),l", "  DD  CB  <i>d</i>  C5  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 0,(ix+<i>d</i>),l", "", "Sets bit 0 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in L." },
{ "set", "0,(ix+%1)", "  DD  CB  <i>d</i>  C6  ", 4, "23", MODE_DIS, EXT_NORMAL, "set 0,(ix+<i>d</i>)", "", "Sets bit 0 of the memory location pointed to by IX plus <i>d</i>." },
{ "set", "0,(ix+%1),a", "  DD  CB  <i>d</i>  C7  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 0,(ix+<i>d</i>),a", "", "Sets bit 0 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in A." },
{ "set", "1,(ix+%1),b", "  DD  CB  <i>d</i>  C8  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 1,(ix+<i>d</i>),b", "", "Sets bit 1 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in B." },
{ "set", "1,(ix+%1),c", "  DD  CB  <i>d</i>  C9  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 1,(ix+<i>d</i>),c", "", "Sets bit 1 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in C." },
{ "set", "1,(ix+%1),d", "  DD  CB  <i>d</i>  CA  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 1,(ix+<i>d</i>),d", "", "Sets bit 1 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in D." },
{ "set", "1,(ix+%1),e", "  DD  CB  <i>d</i>  CB  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 1,(ix+<i>d</i>),e", "", "Sets bit 1 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in E." },
{ "set", "1,(ix+%1),h", "  DD  CB  <i>d</i>  CC  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 1,(ix+<i>d</i>),h", "", "Sets bit 1 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in H." },
{ "set", "1,(ix+%1),l", "  DD  CB  <i>d</i>  CD  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 1,(ix+<i>d</i>),l", "", "Sets bit 1 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in L." },
{ "set", "1,(ix+%1)", "  DD  CB  <i>d</i>  CE  ", 4, "23", MODE_DIS, EXT_NORMAL, "set 1,(ix+<i>d</i>)", "", "Sets bit 1 of the memory location pointed to by IX plus <i>d</i>." },
{ "set", "1,(ix+%1),a", "  DD  CB  <i>d</i>  CF  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 1,(ix+<i>d</i>),a", "", "Sets bit 1 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in A." },
{ "set", "2,(ix+%1),b", "  DD  CB  <i>d</i>  D0  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 2,(ix+<i>d</i>),b", "", "Sets bit 2 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in B." },
{ "set", "2,(ix+%1),c", "  DD  CB  <i>d</i>  D1  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 2,(ix+<i>d</i>),c", "", "Sets bit 2 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in C." },
{ "set", "2,(ix+%1),d", "  DD  CB  <i>d</i>  D2  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 2,(ix+<i>d</i>),d", "", "Sets bit 2 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in D." },
{ "set", "2,(ix+%1),e", "  DD  CB  <i>d</i>  D3  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 2,(ix+<i>d</i>),e", "", "Sets bit 2 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in E." },
{ "set", "2,(ix+%1),h", "  DD  CB  <i>d</i>  D4  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 2,(ix+<i>d</i>),h", "", "Sets bit 2 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in H." },
{ "set", "2,(ix+%1),l", "  DD  CB  <i>d</i>  D5  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 2,(ix+<i>d</i>),l", "", "Sets bit 2 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in L." },
{ "set", "2,(ix+%1)", "  DD  CB  <i>d</i>  D6  ", 4, "23", MODE_DIS, EXT_NORMAL, "set 2,(ix+<i>d</i>)", "", "Sets bit 2 of the memory location pointed to by IX plus <i>d</i>." },
{ "set", "2,(ix+%1),a", "  DD  CB  <i>d</i>  D7  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 2,(ix+<i>d</i>),a", "", "Sets bit 2 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in A." },
{ "set", "3,(ix+%1),b", "  DD  CB  <i>d</i>  D8  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 3,(ix+<i>d</i>),b", "", "Sets bit 3 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in B." },
{ "set", "3,(ix+%1),c", "  DD  CB  <i>d</i>  D9  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 3,(ix+<i>d</i>),c", "", "Sets bit 3 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in C." },
{ "set", "3,(ix+%1),d", "  DD  CB  <i>d</i>  DA  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 3,(ix+<i>d</i>),d", "", "Sets bit 3 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in D." },
{ "set", "3,(ix+%1),e", "  DD  CB  <i>d</i>  DB  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 3,(ix+<i>d</i>),e", "", "Sets bit 3 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in E." },
{ "set", "3,(ix+%1),h", "  DD  CB  <i>d</i>  DC  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 3,(ix+<i>d</i>),h", "", "Sets bit 3 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in H." },
{ "set", "3,(ix+%1),l", "  DD  CB  <i>d</i>  DD  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 3,(ix+<i>d</i>),l", "", "Sets bit 3 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in L." },
{ "set", "3,(ix+%1)", "  DD  CB  <i>d</i>  DE  ", 4, "23", MODE_DIS, EXT_NORMAL, "set 3,(ix+<i>d</i>)", "", "Sets bit 3 of the memory location pointed to by IX plus <i>d</i>." },
{ "set", "3,(ix+%1),a", "  DD  CB  <i>d</i>  DF  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 3,(ix+<i>d</i>),a", "", "Sets bit 3 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in A." },
{ "set", "4,(ix+%1),b", "  DD  CB  <i>d</i>  E0  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 4,(ix+<i>d</i>),b", "", "Sets bit 4 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in B." },
{ "set", "4,(ix+%1),c", "  DD  CB  <i>d</i>  E1  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 4,(ix+<i>d</i>),c", "", "Sets bit 4 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in C." },
{ "set", "4,(ix+%1),d", "  DD  CB  <i>d</i>  E2  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 4,(ix+<i>d</i>),d", "", "Sets bit 4 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in D." },
{ "set", "4,(ix+%1),e", "  DD  CB  <i>d</i>  E3  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 4,(ix+<i>d</i>),e", "", "Sets bit 4 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in E." },
{ "set", "4,(ix+%1),h", "  DD  CB  <i>d</i>  E4  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 4,(ix+<i>d</i>),h", "", "Sets bit 4 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in H." },
{ "set", "4,(ix+%1),l", "  DD  CB  <i>d</i>  E5  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 4,(ix+<i>d</i>),l", "", "Sets bit 4 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in L." },
{ "set", "4,(ix+%1)", "  DD  CB  <i>d</i>  E6  ", 4, "23", MODE_DIS, EXT_NORMAL, "set 4,(ix+<i>d</i>)", "", "Sets bit 4 of the memory location pointed to by IX plus <i>d</i>." },
{ "set", "4,(ix+%1),a", "  DD  CB  <i>d</i>  E7  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 4,(ix+<i>d</i>),a", "", "Sets bit 4 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in A." },
{ "set", "5,(ix+%1),b", "  DD  CB  <i>d</i>  E8  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 5,(ix+<i>d</i>),b", "", "Sets bit 5 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in B." },
{ "set", "5,(ix+%1),c", "  DD  CB  <i>d</i>  E9  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 5,(ix+<i>d</i>),c", "", "Sets bit 5 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in C." },
{ "set", "5,(ix+%1),d", "  DD  CB  <i>d</i>  EA  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 5,(ix+<i>d</i>),d", "", "Sets bit 5 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in D." },
{ "set", "5,(ix+%1),e", "  DD  CB  <i>d</i>  EB  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 5,(ix+<i>d</i>),e", "", "Sets bit 5 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in E." },
{ "set", "5,(ix+%1),h", "  DD  CB  <i>d</i>  EC  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 5,(ix+<i>d</i>),h", "", "Sets bit 5 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in H." },
{ "set", "5,(ix+%1),l", "  DD  CB  <i>d</i>  ED  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 5,(ix+<i>d</i>),l", "", "Sets bit 5 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in L." },
{ "set", "5,(ix+%1)", "  DD  CB  <i>d</i>  EE  ", 4, "23", MODE_DIS, EXT_NORMAL, "set 5,(ix+<i>d</i>)", "", "Sets bit 5 of the memory location pointed to by IX plus <i>d</i>." },
{ "set", "5,(ix+%1),a", "  DD  CB  <i>d</i>  EF  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 5,(ix+<i>d</i>),a", "", "Sets bit 5 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in A." },
{ "set", "6,(ix+%1),b", "  DD  CB  <i>d</i>  F0  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 6,(ix+<i>d</i>),b", "", "Sets bit 6 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in B." },
{ "set", "6,(ix+%1),c", "  DD  CB  <i>d</i>  F1  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 6,(ix+<i>d</i>),c", "", "Sets bit 6 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in C." },
{ "set", "6,(ix+%1),d", "  DD  CB  <i>d</i>  F2  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 6,(ix+<i>d</i>),d", "", "Sets bit 6 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in D." },
{ "set", "6,(ix+%1),e", "  DD  CB  <i>d</i>  F3  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 6,(ix+<i>d</i>),e", "", "Sets bit 6 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in E." },
{ "set", "6,(ix+%1),h", "  DD  CB  <i>d</i>  F4  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 6,(ix+<i>d</i>),h", "", "Sets bit 6 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in H." },
{ "set", "6,(ix+%1),l", "  DD  CB  <i>d</i>  F5  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 6,(ix+<i>d</i>),l", "", "Sets bit 6 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in L." },
{ "set", "6,(ix+%1)", "  DD  CB  <i>d</i>  F6  ", 4, "23", MODE_DIS, EXT_NORMAL, "set 6,(ix+<i>d</i>)", "", "Sets bit 6 of the memory location pointed to by IX plus <i>d</i>." },
{ "set", "6,(ix+%1),a", "  DD  CB  <i>d</i>  F7  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 6,(ix+<i>d</i>),a", "", "Sets bit 6 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in A." },
{ "set", "7,(ix+%1),b", "  DD  CB  <i>d</i>  F8  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 7,(ix+<i>d</i>),b", "", "Sets bit 7 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in B." },
{ "set", "7,(ix+%1),c", "  DD  CB  <i>d</i>  F9  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 7,(ix+<i>d</i>),c", "", "Sets bit 7 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in C." },
{ "set", "7,(ix+%1),d", "  DD  CB  <i>d</i>  FA  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 7,(ix+<i>d</i>),d", "", "Sets bit 7 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in D." },
{ "set", "7,(ix+%1),e", "  DD  CB  <i>d</i>  FB  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 7,(ix+<i>d</i>),e", "", "Sets bit 7 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in E." },
{ "set", "7,(ix+%1),h", "  DD  CB  <i>d</i>  FC  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 7,(ix+<i>d</i>),h", "", "Sets bit 7 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in H." },
{ "set", "7,(ix+%1),l", "  DD  CB  <i>d</i>  FD  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 7,(ix+<i>d</i>),l", "", "Sets bit 7 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in L." },
{ "set", "7,(ix+%1)", "  DD  CB  <i>d</i>  FE  ", 4, "23", MODE_DIS, EXT_NORMAL, "set 7,(ix+<i>d</i>)", "", "Sets bit 7 of the memory location pointed to by IX plus <i>d</i>." },
{ "set", "7,(ix+%1),a", "  DD  CB  <i>d</i>  FF  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 7,(ix+<i>d</i>),a", "", "Sets bit 7 of the memory location pointed to by IX plus <i>d</i>. The result is then stored in A." },
};

static struct distabitem distab_ED[256] = {
{ "in0", "b,(%1)", "  ED  00  <i>n</i> ", 3, "12", MODE_N, EXT_Z180, "in0 b,(<i>n</i>)", "N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "A byte from the port whose address is formed by 00h in the high bits and <i>n</i> in the low bits is written to B." },
{ "out0", "(%1),b", "  ED  01  <i>n</i> ", 3, "13", MODE_N, EXT_Z180, "out0 (<i>n</i>),b", "", "The value of B is written to the port whose address is formed by 00h in the high bits and <i>n</i> in the low bits." },
INVALID,
INVALID,
{ "tst", "b", "  ED  04  ", 2, "10", MODE_IMP, EXT_Z180, "tst b", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Calculates the bitwise AND of B with A and affects flags according to the result. A is not modified." },
INVALID,
INVALID,
INVALID,
{ "in0", "c,(%1)", "  ED  08  <i>n</i> ", 3, "12", MODE_N, EXT_Z180, "in0 c,(<i>n</i>)", "N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "A byte from the port whose address is formed by 00h in the high bits and <i>n</i> in the low bits is written to C." },
{ "out0", "(%1),c", "  ED  09  <i>n</i> ", 3, "13", MODE_N, EXT_Z180, "out0 (<i>n</i>),c", "", "The value of C is written to the port whose address is formed by 00h in the high bits and <i>n</i> in the low bits." },
INVALID,
INVALID,
{ "tst", "c", "  ED  0C  ", 2, "10", MODE_IMP, EXT_Z180, "tst c", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Calculates the bitwise AND of C with A and affects flags according to the result. A is not modified." },
INVALID,
INVALID,
INVALID,
{ "in0", "d,(%1)", "  ED  10  <i>n</i> ", 3, "12", MODE_N, EXT_Z180, "in0 d,(<i>n</i>)", "N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "A byte from the port whose address is formed by 00h in the high bits and <i>n</i> in the low bits is written to D." },
{ "out0", "(%1),d", "  ED  11  <i>n</i> ", 3, "13", MODE_N, EXT_Z180, "out0 (<i>n</i>),d", "", "The value of D is written to the port whose address is formed by 00h in the high bits and <i>n</i> in the low bits." },
INVALID,
INVALID,
{ "tst", "d", "  ED  14  ", 2, "10", MODE_IMP, EXT_Z180, "tst d", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Calculates the bitwise AND of D with A and affects flags according to the result. A is not modified." },
INVALID,
INVALID,
INVALID,
{ "in0", "e,(%1)", "  ED  18  <i>n</i> ", 3, "12", MODE_N, EXT_Z180, "in0 e,(<i>n</i>)", "N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "A byte from the port whose address is formed by 00h in the high bits and <i>n</i> in the low bits is written to E." },
{ "out0", "(%1),e", "  ED  19  <i>n</i> ", 3, "13", MODE_N, EXT_Z180, "out0 (<i>n</i>),e", "", "The value of E is written to the port whose address is formed by 00h in the high bits and <i>n</i> in the low bits." },
INVALID,
INVALID,
{ "tst", "e", "  ED  1C  ", 2, "10", MODE_IMP, EXT_Z180, "tst e", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Calculates the bitwise AND of E with A and affects flags according to the result. A is not modified." },
INVALID,
INVALID,
INVALID,
{ "in0", "h,(%1)", "  ED  20  <i>n</i> ", 3, "12", MODE_N, EXT_Z180, "in0 h,(<i>n</i>)", "N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "A byte from the port whose address is formed by 00h in the high bits and <i>n</i> in the low bits is written to H." },
{ "out0", "(%1),h", "  ED  21  <i>n</i> ", 3, "13", MODE_N, EXT_Z180, "out0 (<i>n</i>),h", "", "The value of H is written to the port whose address is formed by 00h in the high bits and <i>n</i> in the low bits." },
INVALID,
INVALID,
{ "tst", "h", "  ED  24  ", 2, "10", MODE_IMP, EXT_Z180, "tst h", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Calculates the bitwise AND of H with A and affects flags according to the result. A is not modified." },
INVALID,
INVALID,
INVALID,
{ "in0", "l,(%1)", "  ED  28  <i>n</i> ", 3, "12", MODE_N, EXT_Z180, "in0 l,(<i>n</i>)", "N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "A byte from the port whose address is formed by 00h in the high bits and <i>n</i> in the low bits is written to L." },
{ "out0", "(%1),l", "  ED  29  <i>n</i> ", 3, "13", MODE_N, EXT_Z180, "out0 (<i>n</i>),l", "", "The value of L is written to the port whose address is formed by 00h in the high bits and <i>n</i> in the low bits." },
INVALID,
INVALID,
{ "tst", "l", "  ED  2C  ", 2, "10", MODE_IMP, EXT_Z180, "tst l", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Calculates the bitwise AND of L with A and affects flags according to the result. A is not modified." },
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
{ "tst", "(hl)", "  ED  34  ", 2, "10", MODE_IMP, EXT_Z180, "tst (hl)", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Calculates the bitwise AND of (HL) with A and affects flags according to the result. A is not modified." },
INVALID,
INVALID,
INVALID,
{ "in0", "a,(%1)", "  ED  38  <i>n</i> ", 3, "12", MODE_N, EXT_Z180, "in0 a,(<i>n</i>)", "N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "A byte from the port whose address is formed by 00h in the high bits and <i>n</i> in the low bits is written to A." },
{ "out0", "(%1),a", "  ED  39  <i>n</i> ", 3, "13", MODE_N, EXT_Z180, "out0 (<i>n</i>),a", "", "The value of A is written to the port whose address is formed by 00h in the high bits and <i>n</i> in the low bits." },
INVALID,
INVALID,
{ "tst", "a", "  ED  3C  ", 2, "10", MODE_IMP, EXT_Z180, "tst a", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Calculates the bitwise AND of A with A and affects flags according to the result. A is not modified." },
INVALID,
INVALID,
INVALID,
{ "in", "b,(c)", "  ED  40  ", 2, "12", MODE_IMP, EXT_NORMAL, "in b,(c)", "N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "A byte from port C is written to B." },
{ "out", "(c),b", "  ED  41  ", 2, "12", MODE_IMP, EXT_NORMAL, "out (c),b", "", "The value of B is written to port C." },
{ "sbc", "hl,bc", "  ED  42  ", 2, "15", MODE_IMP, EXT_NORMAL, "sbc hl,bc", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts BC and the carry flag from HL." },
{ "ld", "(%1),bc", "  ED  43  <i>nn</i> ", 4, "20", MODE_MEM_NN, EXT_NORMAL, "ld (<i>nn</i>),bc", "", "Stores BC into the memory location pointed to by <i>nn</i>." },
{ "neg", "", "  ED  44  ", 2, "8", MODE_IMP, EXT_NORMAL, "neg", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "The contents of A are negated (two's complement). Operation is the same as subtracting A from zero." },
{ "retn", "", "  ED  45  ", 2, "14", MODE_IMP, EXT_NORMAL, "retn", "", "Used at the end of a non-maskable interrupt service routine (located at 0066h) to pop the top stack entry into PC. The value of IFF2 is copied to IFF1 so that maskable interrupts are allowed to continue as before. NMIs are not enabled on the TI." },
{ "im", "0", "  ED  46  ", 2, "8", MODE_IMP, EXT_NORMAL, "im 0", "", "Sets interrupt mode 0." },
{ "ld", "i,a", "  ED  47  ", 2, "9", MODE_IMP, EXT_NORMAL, "ld i,a", "", "Stores the value of A into register I." },
{ "in", "c,(c)", "  ED  48  ", 2, "12", MODE_IMP, EXT_NORMAL, "in c,(c)", "N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "A byte from port C is written to C." },
{ "out", "(c),c", "  ED  49  ", 2, "12", MODE_IMP, EXT_NORMAL, "out (c),c", "", "The value of C is written to port C." },
{ "adc", "hl,bc", "  ED  4A  ", 2, "15", MODE_IMP, EXT_NORMAL, "adc hl,bc", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds BC and the carry flag to HL." },
{ "ld", "bc,(%1)", "  ED  4B  <i>nn</i> ", 4, "20", MODE_MEM_NN, EXT_NORMAL, "ld bc,(<i>nn</i>)", "", "Loads the value pointed to by <i>nn</i> into BC." },
{ "mlt", "bc", "  ED  4C  ", 2, "17", MODE_IMP, EXT_Z180, "mlt bc", "", "The contents of B and C are multiplied and stored in BC." },
{ "reti", "", "  ED  4D  ", 2, "14", MODE_IMP, EXT_NORMAL, "reti", "", "Used at the end of a maskable interrupt service routine. The top stack entry is popped into PC, and signals an I/O device that the interrupt has finished, allowing nested interrupts (not a consideration on the TI)." },
INVALID,
{ "ld", "r,a", "  ED  4F  ", 2, "9", MODE_IMP, EXT_NORMAL, "ld r,a", "", "Stores the value of A into register R." },
{ "in", "d,(c)", "  ED  50  ", 2, "12", MODE_IMP, EXT_NORMAL, "in d,(c)", "N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "A byte from port C is written to D." },
{ "out", "(c),d", "  ED  51  ", 2, "12", MODE_IMP, EXT_NORMAL, "out (c),d", "", "The value of D is written to port C." },
{ "sbc", "hl,de", "  ED  52  ", 2, "15", MODE_IMP, EXT_NORMAL, "sbc hl,de", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts DE and the carry flag from HL." },
{ "ld", "(%1),de", "  ED  53  <i>nn</i> ", 4, "20", MODE_MEM_NN, EXT_NORMAL, "ld (<i>nn</i>),de", "", "Stores DE into the memory location pointed to by <i>nn</i>." },
INVALID,
INVALID,
{ "im", "1", "  ED  56  ", 2, "8", MODE_IMP, EXT_NORMAL, "im 1", "", "Sets interrupt mode 1." },
{ "ld", "a,i", "  ED  57  ", 2, "9", MODE_IMP, EXT_NORMAL, "ld a,i", "N: reset<br>PV: exceptional<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Stores the value of register I into A." },
{ "in", "e,(c)", "  ED  58  ", 2, "12", MODE_IMP, EXT_NORMAL, "in e,(c)", "N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "A byte from port C is written to E." },
{ "out", "(c),e", "  ED  59  ", 2, "12", MODE_IMP, EXT_NORMAL, "out (c),e", "", "The value of E is written to port C." },
{ "adc", "hl,de", "  ED  5A  ", 2, "15", MODE_IMP, EXT_NORMAL, "adc hl,de", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds DE and the carry flag to HL." },
{ "ld", "de,(%1)", "  ED  5B  <i>nn</i> ", 4, "20", MODE_MEM_NN, EXT_NORMAL, "ld de,(<i>nn</i>)", "", "Loads the value pointed to by <i>nn</i> into DE." },
{ "mlt", "de", "  ED  5C  ", 2, "17", MODE_IMP, EXT_Z180, "mlt de", "", "The contents of D and E are multiplied and stored in DE." },
INVALID,
{ "im", "2", "  ED  5E  ", 2, "8", MODE_IMP, EXT_NORMAL, "im 2", "", "Sets interrupt mode 2." },
{ "ld", "a,r", "  ED  5F  ", 2, "9", MODE_IMP, EXT_NORMAL, "ld a,r", "N: reset<br>PV: exceptional<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Stores the value of register R into A." },
{ "in", "h,(c)", "  ED  60  ", 2, "12", MODE_IMP, EXT_NORMAL, "in h,(c)", "N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "A byte from port C is written to H." },
{ "out", "(c),h", "  ED  61  ", 2, "12", MODE_IMP, EXT_NORMAL, "out (c),h", "", "The value of H is written to port C." },
{ "sbc", "hl,hl", "  ED  62  ", 2, "15", MODE_IMP, EXT_NORMAL, "sbc hl,hl", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts HL and the carry flag from HL." },
{ "ld", "(%1),hl", "  ED  63  <i>nn</i> ", 4, "20", MODE_MEM_NN, EXT_UNDOCUMENTED, "ld (<i>nn</i>),hl", "", "Stores HL into the memory location pointed to by <i>nn</i>." },
{ "tst", "%1", "  ED  64  <i>n</i> ", 3, "10", MODE_N, EXT_Z180, "tst <i>n</i>", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Calculates the bitwise AND of <i>n</i> with A and affects flags according to the result. A is not modified." },
INVALID,
INVALID,
{ "rrd", "", "  ED  67  ", 2, "18", MODE_IMP, EXT_NORMAL, "rrd", "N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the low-order nibble of (HL) are copied to the low-order nibble of A. The previous contents are copied to the high-order nibble of (HL). The previous contents are copied to the low-order nibble of (HL)." },
{ "in", "l,(c)", "  ED  68  ", 2, "12", MODE_IMP, EXT_NORMAL, "in l,(c)", "N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "A byte from port C is written to L." },
{ "out", "(c),l", "  ED  69  ", 2, "12", MODE_IMP, EXT_NORMAL, "out (c),l", "", "The value of L is written to port C." },
{ "adc", "hl,hl", "  ED  6A  ", 2, "15", MODE_IMP, EXT_NORMAL, "adc hl,hl", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds HL and the carry flag to HL." },
{ "ld", "hl,(%1)", "  ED  6B  <i>nn</i> ", 4, "20", MODE_MEM_NN, EXT_UNDOCUMENTED, "ld hl,(<i>nn</i>)", "", "Loads the value pointed to by <i>nn</i> into HL." },
{ "mlt", "hl", "  ED  6C  ", 2, "17", MODE_IMP, EXT_Z180, "mlt hl", "", "The contents of H and L are multiplied and stored in HL." },
INVALID,
INVALID,
{ "rld", "", "  ED  6F  ", 2, "18", MODE_IMP, EXT_NORMAL, "rld", "N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the low-order nibble of (HL) are copied to the high-order nibble of (HL). The previous contents are copied to the low-order nibble of A. The previous contents are copied to the low-order nibble of (HL)." },
{ "in", "(c)", "  ED  70  ", 2, "12", MODE_IMP, EXT_UNDOCUMENTED, "in (c)", "N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Inputs a byte from port C and affects flags only." },
{ "out", "(c),0", "  ED  71  ", 2, "12", MODE_IMP, EXT_UNDOCUMENTED, "out (c),0", "", "Outputs a zero to port C." },
{ "sbc", "hl,sp", "  ED  72  ", 2, "15", MODE_IMP, EXT_NORMAL, "sbc hl,sp", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts SP and the carry flag from HL." },
{ "ld", "(%1),sp", "  ED  73  <i>nn</i> ", 4, "20", MODE_MEM_NN, EXT_NORMAL, "ld (<i>nn</i>),sp", "", "Stores SP into the memory location pointed to by <i>nn</i>." },
{ "tstio", "%1", "  ED  74  <i>n</i> ", 3, "12", MODE_N, EXT_Z180, "tstio <i>n</i>", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Calculates the bitwise AND of <i>n</i> with (C) and affects flags according to the result. (C) is not modified." },
INVALID,
{ "slp", "", "  ED  76  ", 2, "8", MODE_IMP, EXT_Z180, "slp", "", "The CPU enters SLEEP mode." },
INVALID,
{ "in", "a,(c)", "  ED  78  ", 2, "12", MODE_IMP, EXT_NORMAL, "in a,(c)", "N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "A byte from port C is written to A." },
{ "out", "(c),a", "  ED  79  ", 2, "12", MODE_IMP, EXT_NORMAL, "out (c),a", "", "The value of A is written to port C." },
{ "adc", "hl,sp", "  ED  7A  ", 2, "15", MODE_IMP, EXT_NORMAL, "adc hl,sp", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds SP and the carry flag to HL." },
{ "ld", "sp,(%1)", "  ED  7B  <i>nn</i> ", 4, "20", MODE_MEM_NN, EXT_NORMAL, "ld sp,(<i>nn</i>)", "", "Loads the value pointed to by <i>nn</i> into SP." },
{ "mlt", "sp", "  ED  7C  ", 2, "17", MODE_IMP, EXT_Z180, "mlt sp", "", "The contents of SPH and SPL are multiplied and stored in SP." },
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
{ "otim", "", "  ED  83  ", 2, "14", MODE_IMP, EXT_Z180, "otim", "C: as defined<br>N: exceptional<br>PV: detects parity<br>H: as defined<br>Z: exceptional<br>S: as defined<br>", "A byte from the memory location pointed to by HL is written to port C. Then HL and C are incremented and B is decremented." },
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
{ "otdm", "", "  ED  8B  ", 2, "14", MODE_IMP, EXT_Z180, "otdm", "C: as defined<br>N: exceptional<br>PV: detects parity<br>H: as defined<br>Z: exceptional<br>S: as defined<br>", "A byte from the memory location pointed to by HL is written to port C. Then HL, B, and C are decremented." },
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
{ "otimr", "", "  ED  93  ", 2, "16/14", MODE_IMP, EXT_Z180, "otimr", "C: reset<br>N: exceptional<br>PV: set<br>H: reset<br>Z: set<br>S: reset<br>", "A byte from the memory location pointed to by HL is written to port C. Then HL and C are incremented and B is decremented. If B is not zero, this operation is repeated. Interrupts can trigger while this instruction is processing." },
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
{ "otdmr", "", "  ED  9B  ", 2, "16/14", MODE_IMP, EXT_Z180, "otdmr", "C: reset<br>N: exceptional<br>PV: set<br>H: reset<br>Z: set<br>S: reset<br>", "A byte from the memory location pointed to by HL is written to port C. Then HL, B, and C are decremented. If B is not zero, this operation is repeated. Interrupts can trigger while this instruction is processing." },
INVALID,
INVALID,
INVALID,
INVALID,
{ "ldi", "", "  ED  A0  ", 2, "16", MODE_IMP, EXT_NORMAL, "ldi", "N: reset<br>PV: exceptional<br>H: reset<br>", "Transfers a byte of data from the memory location pointed to by HL to the memory location pointed to by DE. Then HL and DE are incremented and BC is decremented." },
{ "cpi", "", "  ED  A1  ", 2, "16", MODE_IMP, EXT_NORMAL, "cpi", "N: set<br>PV: exceptional<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Compares the value of the memory location pointed to by HL with A. Then HL is incremented and BC is decremented." },
{ "ini", "", "  ED  A2  ", 2, "16", MODE_IMP, EXT_NORMAL, "ini", "N: set<br>PV: undefined<br>H: undefined<br>Z: exceptional<br>S: undefined<br>", "A byte from port C is written to the memory location pointed to by HL. Then HL is incremented and B is decremented." },
{ "outi", "", "  ED  A3  ", 2, "16", MODE_IMP, EXT_NORMAL, "outi", "N: set<br>PV: undefined<br>H: undefined<br>Z: exceptional<br>S: undefined<br>", "A byte from the memory location pointed to by HL is written to port C. Then HL is incremented and B is decremented." },
INVALID,
INVALID,
INVALID,
INVALID,
{ "ldd", "", "  ED  A8  ", 2, "16", MODE_IMP, EXT_NORMAL, "ldd", "N: reset<br>PV: exceptional<br>H: reset<br>", "Transfers a byte of data from the memory location pointed to by HL to the memory location pointed to by DE. Then HL, DE, and BC are decremented." },
{ "cpd", "", "  ED  A9  ", 2, "16", MODE_IMP, EXT_NORMAL, "cpd", "N: set<br>PV: exceptional<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Compares the value of the memory location pointed to by HL with A. Then HL and BC are decremented." },
{ "ind", "", "  ED  AA  ", 2, "16", MODE_IMP, EXT_NORMAL, "ind", "N: set<br>PV: undefined<br>H: undefined<br>Z: exceptional<br>S: undefined<br>", "A byte from port C is written to the memory location pointed to by HL. Then HL and B are decremented." },
{ "outd", "", "  ED  AB  ", 2, "16", MODE_IMP, EXT_NORMAL, "outd", "N: set<br>PV: undefined<br>H: undefined<br>Z: exceptional<br>S: undefined<br>", "A byte from the memory location pointed to by HL is written to port C. Then HL and B are decremented." },
INVALID,
INVALID,
INVALID,
INVALID,
{ "ldir", "", "  ED  B0  ", 2, "21/16", MODE_IMP, EXT_NORMAL, "ldir", "N: reset<br>PV: reset<br>H: reset<br>", "Transfers a byte of data from the memory location pointed to by HL to the memory location pointed to by DE. Then HL and DE are incremented and BC is decremented. If BC is not zero, this operation is repeated. Interrupts can trigger while this instruction is processing." },
{ "cpir", "", "  ED  B1  ", 2, "21/16", MODE_IMP, EXT_NORMAL, "cpir", "N: set<br>PV: reset<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Compares the value of the memory location pointed to by HL with A. Then HL is incremented and BC is decremented. If BC is not zero and z is not set, this operation is repeated. Interrupts can trigger while this instruction is processing." },
{ "inir", "", "  ED  B2  ", 2, "21/16", MODE_IMP, EXT_NORMAL, "inir", "N: set<br>PV: undefined<br>H: undefined<br>Z: set<br>S: undefined<br>", "A byte from port C is written to the memory location pointed to by HL. Then HL is incremented and B is decremented. If B is not zero, this operation is repeated. Interrupts can trigger while this instruction is processing." },
{ "otir", "", "  ED  B3  ", 2, "21/16", MODE_IMP, EXT_NORMAL, "otir", "N: set<br>PV: undefined<br>H: undefined<br>Z: set<br>S: undefined<br>", "A byte from the memory location pointed to by HL is written to port C. Then HL is incremented and B is decremented. If B is not zero, this operation is repeated. Interrupts can trigger while this instruction is processing." },
INVALID,
INVALID,
INVALID,
INVALID,
{ "lddr", "", "  ED  B8  ", 2, "21/16", MODE_IMP, EXT_NORMAL, "lddr", "N: reset<br>PV: reset<br>H: reset<br>", "Transfers a byte of data from the memory location pointed to by HL to the memory location pointed to by DE. Then HL, DE, and BC are decremented. If BC is not zero, this operation is repeated. Interrupts can trigger while this instruction is processing." },
{ "cpdr", "", "  ED  B9  ", 2, "21/16", MODE_IMP, EXT_NORMAL, "cpdr", "N: set<br>PV: reset<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Compares the value of the memory location pointed to by HL with A. Then HL and BC are decremented. If BC is not zero and z is not set, this operation is repeated. Interrupts can trigger while this instruction is processing." },
{ "indr", "", "  ED  BA  ", 2, "21/16", MODE_IMP, EXT_NORMAL, "indr", "N: set<br>PV: undefined<br>H: undefined<br>Z: set<br>S: undefined<br>", "A byte from port C is written to the memory location pointed to by HL. Then HL and B are decremented. If B is not zero, this operation is repeated. Interrupts can trigger while this instruction is processing." },
{ "otdr", "", "  ED  BB  ", 2, "21/16", MODE_IMP, EXT_NORMAL, "otdr", "N: set<br>PV: undefined<br>H: undefined<br>Z: set<br>S: undefined<br>", "A byte from the memory location pointed to by HL is written to port C. Then HL and B are decremented. If B is not zero, this operation is repeated. Interrupts can trigger while this instruction is processing." },
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
};

static struct distabitem distab_FD[256] = {
INVALID,
INVALID,
INVALID,
INVALID,
{ "inc", "b", "  FD  04  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "inc b", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds one to r." },
{ "dec", "b", "  FD  05  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "dec b", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts one from B." },
{ "ld", "b,%1", "  FD  06  <i>n</i> ", 3, "11", MODE_N, EXT_UNDOCUMENTED, "ld b,<i>n</i>", "", "Loads <i>n</i> into B." },
INVALID,
INVALID,
{ "add", "iy,bc", "  FD  09  ", 2, "15", MODE_IMP, EXT_NORMAL, "add iy,bc", "C: as defined<br>N: as defined<br>H: as defined<br>", "The value of BC is added to IY." },
INVALID,
INVALID,
{ "inc", "c", "  FD  0C  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "inc c", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds one to r." },
{ "dec", "c", "  FD  0D  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "dec c", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts one from C." },
{ "ld", "c,%1", "  FD  0E  <i>n</i> ", 3, "11", MODE_N, EXT_UNDOCUMENTED, "ld c,<i>n</i>", "", "Loads <i>n</i> into C." },
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
{ "inc", "d", "  FD  14  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "inc d", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds one to r." },
{ "dec", "d", "  FD  15  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "dec d", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts one from D." },
{ "ld", "d,%1", "  FD  16  <i>n</i> ", 3, "11", MODE_N, EXT_UNDOCUMENTED, "ld d,<i>n</i>", "", "Loads <i>n</i> into D." },
INVALID,
INVALID,
{ "add", "iy,de", "  FD  19  ", 2, "15", MODE_IMP, EXT_NORMAL, "add iy,de", "C: as defined<br>N: as defined<br>H: as defined<br>", "The value of DE is added to IY." },
INVALID,
INVALID,
{ "inc", "e", "  FD  1C  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "inc e", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds one to r." },
{ "dec", "e", "  FD  1D  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "dec e", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts one from E." },
{ "ld", "e,%1", "  FD  1E  <i>n</i> ", 3, "11", MODE_N, EXT_UNDOCUMENTED, "ld e,<i>n</i>", "", "Loads <i>n</i> into E." },
INVALID,
INVALID,
{ "ld", "iy,%1", "  FD  21  <i>nn</i> ", 4, "14", MODE_NN, EXT_NORMAL, "ld iy,<i>nn</i>", "", "Loads <i>nn</i> into register IY." },
{ "ld", "(%1),iy", "  FD  22  <i>nn</i> ", 4, "20", MODE_MEM_NN, EXT_NORMAL, "ld (<i>nn</i>),iy", "", "Stores IY into the memory location pointed to by <i>nn</i>." },
{ "inc", "iy", "  FD  23  ", 2, "10", MODE_IMP, EXT_NORMAL, "inc iy", "", "Adds one to IY." },
{ "inc", "iyh", "  FD  24  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "inc iyh", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds one to r." },
{ "dec", "iyh", "  FD  25  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "dec iyh", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts one from IYH." },
{ "ld", "iyh,%1", "  FD  26  <i>n</i> ", 3, "11", MODE_N, EXT_UNDOCUMENTED, "ld iyh,<i>n</i>", "", "Loads <i>n</i> into IYH." },
INVALID,
INVALID,
{ "add", "iy,iy", "  FD  29  ", 2, "15", MODE_IMP, EXT_NORMAL, "add iy,iy", "C: as defined<br>N: as defined<br>H: as defined<br>", "The value of IY is added to IY." },
{ "ld", "iy,(%1)", "  FD  2A  <i>nn</i> ", 4, "20", MODE_MEM_NN, EXT_NORMAL, "ld iy,(<i>nn</i>)", "", "Loads the value pointed to by <i>nn</i> into IY." },
{ "dec", "iy", "  FD  2B  ", 2, "10", MODE_IMP, EXT_NORMAL, "dec iy", "", "Subtracts one from IY." },
{ "inc", "iyl", "  FD  2C  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "inc iyl", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds one to r." },
{ "dec", "iyl", "  FD  2D  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "dec iyl", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts one from IYL." },
{ "ld", "iyl,%1", "  FD  2E  <i>n</i> ", 3, "11", MODE_N, EXT_UNDOCUMENTED, "ld iyl,<i>n</i>", "", "Loads <i>n</i> into IYL." },
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
{ "inc", "(iy+%1)", "  FD  34  <i>d</i> ", 3, "23", MODE_DIS, EXT_NORMAL, "inc (iy+<i>d</i>)", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds one to the memory location pointed to by IY plus <i>d</i>." },
{ "dec", "(iy+%1)", "  FD  35  <i>d</i> ", 3, "23", MODE_DIS, EXT_NORMAL, "dec (iy+<i>d</i>)", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts one from the memory location pointed to by IY plus <i>d</i>." },
{ "ld", "(iy+%1),%1", "  FD  36  <i>d</i> <i>n</i> ", 4, "19", MODE_N, EXT_NORMAL, "ld (iy+<i>d</i>),<i>n</i>", "", "Stores <i>n</i> to the memory location pointed to by IY plus <i>d</i>." },
INVALID,
INVALID,
{ "add", "iy,sp", "  FD  39  ", 2, "15", MODE_IMP, EXT_NORMAL, "add iy,sp", "C: as defined<br>N: as defined<br>H: as defined<br>", "The value of SP is added to IY." },
INVALID,
INVALID,
{ "inc", "a", "  FD  3C  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "inc a", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds one to r." },
{ "dec", "a", "  FD  3D  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "dec a", "N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts one from A." },
{ "ld", "a,%1", "  FD  3E  <i>n</i> ", 3, "11", MODE_N, EXT_UNDOCUMENTED, "ld a,<i>n</i>", "", "Loads <i>n</i> into A." },
INVALID,
{ "ld", "b,b", "  FD  40  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld b,b", "", "The contents of B are loaded into B." },
{ "ld", "b,c", "  FD  41  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld b,c", "", "The contents of C are loaded into B." },
{ "ld", "b,d", "  FD  42  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld b,d", "", "The contents of D are loaded into B." },
{ "ld", "b,e", "  FD  43  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld b,e", "", "The contents of E are loaded into B." },
{ "ld", "b,iyh", "  FD  44  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld b,iyh", "", "The contents of IYH are loaded into B." },
{ "ld", "b,iyl", "  FD  45  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld b,iyl", "", "The contents of IYL are loaded into B." },
{ "ld", "b,(iy+%1)", "  FD  46  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "ld b,(iy+<i>d</i>)", "", "Loads the value pointed to by IY plus <i>d</i> into B." },
{ "ld", "b,a", "  FD  47  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld b,a", "", "The contents of A are loaded into B." },
{ "ld", "c,b", "  FD  48  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld c,b", "", "The contents of B are loaded into C." },
{ "ld", "c,c", "  FD  49  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld c,c", "", "The contents of C are loaded into C." },
{ "ld", "c,d", "  FD  4A  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld c,d", "", "The contents of D are loaded into C." },
{ "ld", "c,e", "  FD  4B  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld c,e", "", "The contents of E are loaded into C." },
{ "ld", "c,iyh", "  FD  4C  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld c,iyh", "", "The contents of IYH are loaded into C." },
{ "ld", "c,iyl", "  FD  4D  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld c,iyl", "", "The contents of IYL are loaded into C." },
{ "ld", "c,(iy+%1)", "  FD  4E  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "ld c,(iy+<i>d</i>)", "", "Loads the value pointed to by IY plus <i>d</i> into C." },
{ "ld", "c,a", "  FD  4F  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld c,a", "", "The contents of A are loaded into C." },
{ "ld", "d,b", "  FD  50  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld d,b", "", "The contents of B are loaded into D." },
{ "ld", "d,c", "  FD  51  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld d,c", "", "The contents of C are loaded into D." },
{ "ld", "d,d", "  FD  52  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld d,d", "", "The contents of D are loaded into D." },
{ "ld", "d,e", "  FD  53  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld d,e", "", "The contents of E are loaded into D." },
{ "ld", "d,iyh", "  FD  54  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld d,iyh", "", "The contents of IYH are loaded into D." },
{ "ld", "d,iyl", "  FD  55  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld d,iyl", "", "The contents of IYL are loaded into D." },
{ "ld", "d,(iy+%1)", "  FD  56  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "ld d,(iy+<i>d</i>)", "", "Loads the value pointed to by IY plus <i>d</i> into D." },
{ "ld", "d,a", "  FD  57  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld d,a", "", "The contents of A are loaded into D." },
{ "ld", "e,b", "  FD  58  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld e,b", "", "The contents of B are loaded into E." },
{ "ld", "e,c", "  FD  59  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld e,c", "", "The contents of C are loaded into E." },
{ "ld", "e,d", "  FD  5A  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld e,d", "", "The contents of D are loaded into E." },
{ "ld", "e,e", "  FD  5B  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld e,e", "", "The contents of E are loaded into E." },
{ "ld", "e,iyh", "  FD  5C  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld e,iyh", "", "The contents of IYH are loaded into E." },
{ "ld", "e,iyl", "  FD  5D  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld e,iyl", "", "The contents of IYL are loaded into E." },
{ "ld", "e,(iy+%1)", "  FD  5E  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "ld e,(iy+<i>d</i>)", "", "Loads the value pointed to by IY plus <i>d</i> into E." },
{ "ld", "e,a", "  FD  5F  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld e,a", "", "The contents of A are loaded into E." },
{ "ld", "iyh,b", "  FD  60  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld iyh,b", "", "The contents of B are loaded into IYH." },
{ "ld", "iyh,c", "  FD  61  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld iyh,c", "", "The contents of C are loaded into IYH." },
{ "ld", "iyh,d", "  FD  62  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld iyh,d", "", "The contents of D are loaded into IYH." },
{ "ld", "iyh,e", "  FD  63  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld iyh,e", "", "The contents of E are loaded into IYH." },
{ "ld", "iyh,iyh", "  FD  64  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld iyh,iyh", "", "The contents of IYH are loaded into IYH." },
{ "ld", "iyh,iyl", "  FD  65  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld iyh,iyl", "", "The contents of IYL are loaded into IYH." },
{ "ld", "h,(iy+%1)", "  FD  66  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "ld h,(iy+<i>d</i>)", "", "Loads the value pointed to by IY plus <i>d</i> into H." },
{ "ld", "iyh,a", "  FD  67  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld iyh,a", "", "The contents of A are loaded into IYH." },
{ "ld", "iyl,b", "  FD  68  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld iyl,b", "", "The contents of B are loaded into IYL." },
{ "ld", "iyl,c", "  FD  69  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld iyl,c", "", "The contents of C are loaded into IYL." },
{ "ld", "iyl,d", "  FD  6A  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld iyl,d", "", "The contents of D are loaded into IYL." },
{ "ld", "iyl,e", "  FD  6B  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld iyl,e", "", "The contents of E are loaded into IYL." },
{ "ld", "iyl,iyh", "  FD  6C  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld iyl,iyh", "", "The contents of IYH are loaded into IYL." },
{ "ld", "iyl,iyl", "  FD  6D  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld iyl,iyl", "", "The contents of IYL are loaded into IYL." },
{ "ld", "l,(iy+%1)", "  FD  6E  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "ld l,(iy+<i>d</i>)", "", "Loads the value pointed to by IY plus <i>d</i> into L." },
{ "ld", "iyl,a", "  FD  6F  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld iyl,a", "", "The contents of A are loaded into IYL." },
{ "ld", "(iy+%1),b", "  FD  70  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "ld (iy+<i>d</i>),b", "", "Stores B to the memory location pointed to by IY plus <i>d</i>." },
{ "ld", "(iy+%1),c", "  FD  71  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "ld (iy+<i>d</i>),c", "", "Stores C to the memory location pointed to by IY plus <i>d</i>." },
{ "ld", "(iy+%1),d", "  FD  72  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "ld (iy+<i>d</i>),d", "", "Stores D to the memory location pointed to by IY plus <i>d</i>." },
{ "ld", "(iy+%1),e", "  FD  73  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "ld (iy+<i>d</i>),e", "", "Stores E to the memory location pointed to by IY plus <i>d</i>." },
{ "ld", "(iy+%1),h", "  FD  74  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "ld (iy+<i>d</i>),h", "", "Stores H to the memory location pointed to by IY plus <i>d</i>." },
{ "ld", "(iy+%1),l", "  FD  75  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "ld (iy+<i>d</i>),l", "", "Stores L to the memory location pointed to by IY plus <i>d</i>." },
INVALID,
{ "ld", "(iy+%1),a", "  FD  77  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "ld (iy+<i>d</i>),a", "", "Stores A to the memory location pointed to by IY plus <i>d</i>." },
{ "ld", "a,b", "  FD  78  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld a,b", "", "The contents of B are loaded into A." },
{ "ld", "a,c", "  FD  79  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld a,c", "", "The contents of C are loaded into A." },
{ "ld", "a,d", "  FD  7A  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld a,d", "", "The contents of D are loaded into A." },
{ "ld", "a,e", "  FD  7B  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld a,e", "", "The contents of E are loaded into A." },
{ "ld", "a,iyh", "  FD  7C  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld a,iyh", "", "The contents of IYH are loaded into A." },
{ "ld", "a,iyl", "  FD  7D  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld a,iyl", "", "The contents of IYL are loaded into A." },
{ "ld", "a,(iy+%1)", "  FD  7E  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "ld a,(iy+<i>d</i>)", "", "Loads the value pointed to by IY plus <i>d</i> into A." },
{ "ld", "a,a", "  FD  7F  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "ld a,a", "", "The contents of A are loaded into A." },
{ "add", "a,b", "  FD  80  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "add a,b", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds B to A." },
{ "add", "a,c", "  FD  81  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "add a,c", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds C to A." },
{ "add", "a,d", "  FD  82  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "add a,d", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds D to A." },
{ "add", "a,e", "  FD  83  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "add a,e", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds E to A." },
{ "add", "a,iyh", "  FD  84  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "add a,iyh", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds IYH to A." },
{ "add", "a,iyl", "  FD  85  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "add a,iyl", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds IYL to A." },
{ "add", "a,(iy+%1)", "  FD  86  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "add a,(iy+<i>d</i>)", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds the value pointed to by IY plus <i>d</i> to A." },
{ "add", "a,a", "  FD  87  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "add a,a", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds A to A." },
{ "adc", "a,b", "  FD  88  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "adc a,b", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds B and the carry flag to A." },
{ "adc", "a,c", "  FD  89  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "adc a,c", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds C and the carry flag to A." },
{ "adc", "a,d", "  FD  8A  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "adc a,d", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds D and the carry flag to A." },
{ "adc", "a,e", "  FD  8B  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "adc a,e", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds E and the carry flag to A." },
{ "adc", "a,iyh", "  FD  8C  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "adc a,iyh", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds IYH and the carry flag to A." },
{ "adc", "a,iyl", "  FD  8D  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "adc a,iyl", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds IYL and the carry flag to A." },
{ "adc", "a,(iy+%1)", "  FD  8E  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "adc a,(iy+<i>d</i>)", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds the value pointed to by IY plus <i>d</i> and the carry flag to A." },
{ "adc", "a,a", "  FD  8F  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "adc a,a", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Adds A and the carry flag to A." },
{ "sub", "b", "  FD  90  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sub b", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts B from A." },
{ "sub", "c", "  FD  91  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sub c", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts C from A." },
{ "sub", "d", "  FD  92  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sub d", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts D from A." },
{ "sub", "e", "  FD  93  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sub e", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts E from A." },
{ "sub", "iyh", "  FD  94  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sub iyh", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts IYH from A." },
{ "sub", "iyl", "  FD  95  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sub iyl", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts IYL from A." },
{ "sub", "(iy+%1)", "  FD  96  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "sub (iy+<i>d</i>)", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts the value pointed to by IY plus <i>d</i> from A." },
{ "sub", "a", "  FD  97  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sub a", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts A from A." },
{ "sbc", "a,b", "  FD  98  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sbc a,b", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts B and the carry flag from A." },
{ "sbc", "a,c", "  FD  99  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sbc a,c", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts C and the carry flag from A." },
{ "sbc", "a,d", "  FD  9A  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sbc a,d", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts D and the carry flag from A." },
{ "sbc", "a,e", "  FD  9B  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sbc a,e", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts E and the carry flag from A." },
{ "sbc", "a,iyh", "  FD  9C  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sbc a,iyh", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts IYH and the carry flag from A." },
{ "sbc", "a,iyl", "  FD  9D  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sbc a,iyl", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts IYL and the carry flag from A." },
{ "sbc", "a,(iy+%1)", "  FD  9E  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "sbc a,(iy+<i>d</i>)", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts the value pointed to by IY plus <i>d</i> and the carry flag from A." },
{ "sbc", "a,a", "  FD  9F  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "sbc a,a", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts A and the carry flag from A." },
{ "and", "b", "  FD  A0  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "and b", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Bitwise AND on A with B." },
{ "and", "c", "  FD  A1  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "and c", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Bitwise AND on A with C." },
{ "and", "d", "  FD  A2  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "and d", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Bitwise AND on A with D." },
{ "and", "e", "  FD  A3  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "and e", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Bitwise AND on A with E." },
{ "and", "iyh", "  FD  A4  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "and iyh", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Bitwise AND on A with IYH." },
{ "and", "iyl", "  FD  A5  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "and iyl", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Bitwise AND on A with IYL." },
{ "and", "(iy+%1)", "  FD  A6  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "and (iy+<i>d</i>)", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Bitwise AND on A with the value pointed to by IY plus <i>d</i>." },
{ "and", "a", "  FD  A7  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "and a", "C: reset<br>N: reset<br>PV: detects parity<br>H: set<br>Z: as defined<br>S: as defined<br>", "Bitwise AND on A with A." },
{ "xor", "b", "  FD  A8  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "xor b", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise XOR on A with B." },
{ "xor", "c", "  FD  A9  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "xor c", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise XOR on A with C." },
{ "xor", "d", "  FD  AA  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "xor d", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise XOR on A with D." },
{ "xor", "e", "  FD  AB  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "xor e", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise XOR on A with E." },
{ "xor", "iyh", "  FD  AC  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "xor iyh", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise XOR on A with IYH." },
{ "xor", "iyl", "  FD  AD  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "xor iyl", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise XOR on A with IYL." },
{ "xor", "(iy+%1)", "  FD  AE  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "xor (iy+<i>d</i>)", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise XOR on A with the value pointed to by IY plus <i>d</i>." },
{ "xor", "a", "  FD  AF  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "xor a", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise XOR on A with A." },
{ "or", "b", "  FD  B0  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "or b", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise OR on A with r." },
{ "or", "c", "  FD  B1  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "or c", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise OR on A with r." },
{ "or", "d", "  FD  B2  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "or d", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise OR on A with r." },
{ "or", "e", "  FD  B3  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "or e", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise OR on A with r." },
{ "or", "iyh", "  FD  B4  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "or iyh", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise OR on A with r." },
{ "or", "iyl", "  FD  B5  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "or iyl", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise OR on A with r." },
{ "or", "(iy+%1)", "  FD  B6  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "or (iy+<i>d</i>)", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise OR on A with the value pointed to by IY plus <i>d</i>." },
{ "or", "a", "  FD  B7  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "or a", "C: reset<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "Bitwise OR on A with r." },
{ "cp", "b", "  FD  B8  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "cp b", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts B from A and affects flags according to the result. A is not modified." },
{ "cp", "c", "  FD  B9  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "cp c", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts C from A and affects flags according to the result. A is not modified." },
{ "cp", "d", "  FD  BA  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "cp d", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts D from A and affects flags according to the result. A is not modified." },
{ "cp", "e", "  FD  BB  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "cp e", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts E from A and affects flags according to the result. A is not modified." },
{ "cp", "iyh", "  FD  BC  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "cp iyh", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts IYH from A and affects flags according to the result. A is not modified." },
{ "cp", "iyl", "  FD  BD  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "cp iyl", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts IYL from A and affects flags according to the result. A is not modified." },
{ "cp", "(iy+%1)", "  FD  BE  <i>d</i> ", 3, "19", MODE_DIS, EXT_NORMAL, "cp (iy+<i>d</i>)", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts the value pointed to by IY plus <i>d</i> from A and affects flags according to the result. A is not modified." },
{ "cp", "a", "  FD  BF  ", 2, "8", MODE_IMP, EXT_UNDOCUMENTED, "cp a", "C: as defined<br>N: as defined<br>PV: detects overflow<br>H: as defined<br>Z: as defined<br>S: as defined<br>", "Subtracts A from A and affects flags according to the result. A is not modified." },
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
{ "pop", "iy", "  FD  E1  ", 2, "14", MODE_IMP, EXT_NORMAL, "pop iy", "", "The memory location pointed to by SP is stored into IYL and SP is incremented. The memory location pointed to by SP is stored into IYH and SP is incremented again." },
INVALID,
{ "ex", "(sp),iy", "  FD  E3  ", 2, "23", MODE_IMP, EXT_NORMAL, "ex (sp),iy", "", "Exchanges (SP) with IYL, and (SP+1) with IYH." },
INVALID,
{ "push", "iy", "  FD  E5  ", 2, "15", MODE_IMP, EXT_NORMAL, "push iy", "", "SP is decremented and IYH is stored into the memory location pointed to by SP. SP is decremented again and IYL is stored into the memory location pointed to by SP." },
INVALID,
INVALID,
INVALID,
{ "jp", "(iy)", "  FD  E9  ", 2, "8", MODE_IMP, EXT_JUMP, "jp (iy)", "", "Loads the value of IY into PC." },
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
{ "ld", "sp,iy", "  FD  F9  ", 2, "10", MODE_IMP, EXT_NORMAL, "ld sp,iy", "", "Loads the value of IY into SP." },
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
INVALID,
};

static struct distabitem distab_FDCB[256] = {
{ "rlc", "(iy+%1),b", "  FD  CB  <i>d</i>  00  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rlc (iy+<i>d</i>),b", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0. The result is then stored in B." },
{ "rlc", "(iy+%1),c", "  FD  CB  <i>d</i>  01  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rlc (iy+<i>d</i>),c", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0. The result is then stored in C." },
{ "rlc", "(iy+%1),d", "  FD  CB  <i>d</i>  02  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rlc (iy+<i>d</i>),d", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0. The result is then stored in D." },
{ "rlc", "(iy+%1),e", "  FD  CB  <i>d</i>  03  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rlc (iy+<i>d</i>),e", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0. The result is then stored in E." },
{ "rlc", "(iy+%1),h", "  FD  CB  <i>d</i>  04  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rlc (iy+<i>d</i>),h", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0. The result is then stored in H." },
{ "rlc", "(iy+%1),l", "  FD  CB  <i>d</i>  05  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rlc (iy+<i>d</i>),l", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0. The result is then stored in L." },
{ "rlc", "(iy+%1)", "  FD  CB  <i>d</i>  06  ", 4, "23", MODE_DIS, EXT_NORMAL, "rlc (iy+<i>d</i>)", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0." },
{ "rlc", "(iy+%1),a", "  FD  CB  <i>d</i>  07  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rlc (iy+<i>d</i>),a", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0. The result is then stored in A." },
{ "rrc", "(iy+%1),b", "  FD  CB  <i>d</i>  08  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rrc (iy+<i>d</i>),b", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7. The result is then stored in B." },
{ "rrc", "(iy+%1),c", "  FD  CB  <i>d</i>  09  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rrc (iy+<i>d</i>),c", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7. The result is then stored in C." },
{ "rrc", "(iy+%1),d", "  FD  CB  <i>d</i>  0A  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rrc (iy+<i>d</i>),d", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7. The result is then stored in D." },
{ "rrc", "(iy+%1),e", "  FD  CB  <i>d</i>  0B  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rrc (iy+<i>d</i>),e", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7. The result is then stored in E." },
{ "rrc", "(iy+%1),h", "  FD  CB  <i>d</i>  0C  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rrc (iy+<i>d</i>),h", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7. The result is then stored in H." },
{ "rrc", "(iy+%1),l", "  FD  CB  <i>d</i>  0D  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rrc (iy+<i>d</i>),l", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7. The result is then stored in L." },
{ "rrc", "(iy+%1)", "  FD  CB  <i>d</i>  0E  ", 4, "23", MODE_DIS, EXT_NORMAL, "rrc (iy+<i>d</i>)", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7." },
{ "rrc", "(iy+%1),a", "  FD  CB  <i>d</i>  0F  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rrc (iy+<i>d</i>),a", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7. The result is then stored in A." },
{ "rl", "(iy+%1),b", "  FD  CB  <i>d</i>  10  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rl (iy+<i>d</i>),b", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0. The result is then stored in B." },
{ "rl", "(iy+%1),c", "  FD  CB  <i>d</i>  11  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rl (iy+<i>d</i>),c", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0. The result is then stored in C." },
{ "rl", "(iy+%1),d", "  FD  CB  <i>d</i>  12  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rl (iy+<i>d</i>),d", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0. The result is then stored in D." },
{ "rl", "(iy+%1),e", "  FD  CB  <i>d</i>  13  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rl (iy+<i>d</i>),e", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0. The result is then stored in E." },
{ "rl", "(iy+%1),h", "  FD  CB  <i>d</i>  14  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rl (iy+<i>d</i>),h", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0. The result is then stored in H." },
{ "rl", "(iy+%1),l", "  FD  CB  <i>d</i>  15  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rl (iy+<i>d</i>),l", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0. The result is then stored in L." },
{ "rl", "(iy+%1)", "  FD  CB  <i>d</i>  16  ", 4, "23", MODE_DIS, EXT_NORMAL, "rl (iy+<i>d</i>)", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0." },
{ "rl", "(iy+%1),a", "  FD  CB  <i>d</i>  17  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rl (iy+<i>d</i>),a", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0. The result is then stored in A." },
{ "rr", "(iy+%1),b", "  FD  CB  <i>d</i>  18  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rr (iy+<i>d</i>),b", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7. The result is then stored in B." },
{ "rr", "(iy+%1),c", "  FD  CB  <i>d</i>  19  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rr (iy+<i>d</i>),c", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7. The result is then stored in C." },
{ "rr", "(iy+%1),d", "  FD  CB  <i>d</i>  1A  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rr (iy+<i>d</i>),d", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7. The result is then stored in D." },
{ "rr", "(iy+%1),e", "  FD  CB  <i>d</i>  1B  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rr (iy+<i>d</i>),e", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7. The result is then stored in E." },
{ "rr", "(iy+%1),h", "  FD  CB  <i>d</i>  1C  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rr (iy+<i>d</i>),h", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7. The result is then stored in H." },
{ "rr", "(iy+%1),l", "  FD  CB  <i>d</i>  1D  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rr (iy+<i>d</i>),l", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7. The result is then stored in L." },
{ "rr", "(iy+%1)", "  FD  CB  <i>d</i>  1E  ", 4, "23", MODE_DIS, EXT_NORMAL, "rr (iy+<i>d</i>)", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7." },
{ "rr", "(iy+%1),a", "  FD  CB  <i>d</i>  1F  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "rr (iy+<i>d</i>),a", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7. The result is then stored in A." },
{ "sla", "(iy+%1),b", "  FD  CB  <i>d</i>  20  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sla (iy+<i>d</i>),b", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0. The result is then stored in B." },
{ "sla", "(iy+%1),c", "  FD  CB  <i>d</i>  21  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sla (iy+<i>d</i>),c", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0. The result is then stored in C." },
{ "sla", "(iy+%1),d", "  FD  CB  <i>d</i>  22  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sla (iy+<i>d</i>),d", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0. The result is then stored in D." },
{ "sla", "(iy+%1),e", "  FD  CB  <i>d</i>  23  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sla (iy+<i>d</i>),e", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0. The result is then stored in E." },
{ "sla", "(iy+%1),h", "  FD  CB  <i>d</i>  24  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sla (iy+<i>d</i>),h", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0. The result is then stored in H." },
{ "sla", "(iy+%1),l", "  FD  CB  <i>d</i>  25  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sla (iy+<i>d</i>),l", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0. The result is then stored in L." },
{ "sla", "(iy+%1)", "  FD  CB  <i>d</i>  26  ", 4, "23", MODE_DIS, EXT_NORMAL, "sla (iy+<i>d</i>)", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0." },
{ "sla", "(iy+%1),a", "  FD  CB  <i>d</i>  27  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sla (iy+<i>d</i>),a", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0. The result is then stored in A." },
{ "sra", "(iy+%1),b", "  FD  CB  <i>d</i>  28  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sra (iy+<i>d</i>),b", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged. The result is then stored in B." },
{ "sra", "(iy+%1),c", "  FD  CB  <i>d</i>  29  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sra (iy+<i>d</i>),c", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged. The result is then stored in C." },
{ "sra", "(iy+%1),d", "  FD  CB  <i>d</i>  2A  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sra (iy+<i>d</i>),d", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged. The result is then stored in D." },
{ "sra", "(iy+%1),e", "  FD  CB  <i>d</i>  2B  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sra (iy+<i>d</i>),e", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged. The result is then stored in E." },
{ "sra", "(iy+%1),h", "  FD  CB  <i>d</i>  2C  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sra (iy+<i>d</i>),h", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged. The result is then stored in H." },
{ "sra", "(iy+%1),l", "  FD  CB  <i>d</i>  2D  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sra (iy+<i>d</i>),l", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged. The result is then stored in L." },
{ "sra", "(iy+%1)", "  FD  CB  <i>d</i>  2E  ", 4, "23", MODE_DIS, EXT_NORMAL, "sra (iy+<i>d</i>)", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged." },
{ "sra", "(iy+%1),a", "  FD  CB  <i>d</i>  2F  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sra (iy+<i>d</i>),a", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged. The result is then stored in A." },
{ "sll", "(iy+%1),b", "  FD  CB  <i>d</i>  30  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sll (iy+<i>d</i>),b", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0. The result is then stored in B." },
{ "sll", "(iy+%1),c", "  FD  CB  <i>d</i>  31  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sll (iy+<i>d</i>),c", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0. The result is then stored in C." },
{ "sll", "(iy+%1),d", "  FD  CB  <i>d</i>  32  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sll (iy+<i>d</i>),d", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0. The result is then stored in D." },
{ "sll", "(iy+%1),e", "  FD  CB  <i>d</i>  33  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sll (iy+<i>d</i>),e", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0. The result is then stored in E." },
{ "sll", "(iy+%1),h", "  FD  CB  <i>d</i>  34  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sll (iy+<i>d</i>),h", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0. The result is then stored in H." },
{ "sll", "(iy+%1),l", "  FD  CB  <i>d</i>  35  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sll (iy+<i>d</i>),l", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0. The result is then stored in L." },
{ "sll", "(iy+%1)", "  FD  CB  <i>d</i>  36  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sll (iy+<i>d</i>)", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0." },
{ "sll", "(iy+%1),a", "  FD  CB  <i>d</i>  37  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "sll (iy+<i>d</i>),a", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0. The result is then stored in A." },
{ "srl", "(iy+%1),b", "  FD  CB  <i>d</i>  38  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "srl (iy+<i>d</i>),b", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7. The result is then stored in B." },
{ "srl", "(iy+%1),c", "  FD  CB  <i>d</i>  39  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "srl (iy+<i>d</i>),c", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7. The result is then stored in C." },
{ "srl", "(iy+%1),d", "  FD  CB  <i>d</i>  3A  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "srl (iy+<i>d</i>),d", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7. The result is then stored in D." },
{ "srl", "(iy+%1),e", "  FD  CB  <i>d</i>  3B  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "srl (iy+<i>d</i>),e", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7. The result is then stored in E." },
{ "srl", "(iy+%1),h", "  FD  CB  <i>d</i>  3C  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "srl (iy+<i>d</i>),h", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7. The result is then stored in H." },
{ "srl", "(iy+%1),l", "  FD  CB  <i>d</i>  3D  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "srl (iy+<i>d</i>),l", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7. The result is then stored in L." },
{ "srl", "(iy+%1)", "  FD  CB  <i>d</i>  3E  ", 4, "23", MODE_DIS, EXT_NORMAL, "srl (iy+<i>d</i>)", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7." },
{ "srl", "(iy+%1),a", "  FD  CB  <i>d</i>  3F  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "srl (iy+<i>d</i>),a", "C: as defined<br>N: reset<br>PV: detects parity<br>H: reset<br>Z: as defined<br>S: as defined<br>", "The contents of the memory location pointed to by IY plus <i>d</i> are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7. The result is then stored in A." },
{ "bit", "0,(iy+%1)", "  FD  CB  <i>d</i>  40  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 0,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 0 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "0,(iy+%1)", "  FD  CB  <i>d</i>  41  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 0,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 0 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "0,(iy+%1)", "  FD  CB  <i>d</i>  42  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 0,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 0 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "0,(iy+%1)", "  FD  CB  <i>d</i>  43  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 0,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 0 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "0,(iy+%1)", "  FD  CB  <i>d</i>  44  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 0,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 0 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "0,(iy+%1)", "  FD  CB  <i>d</i>  45  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 0,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 0 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "0,(iy+%1)", "  FD  CB  <i>d</i>  46  ", 4, "20", MODE_DIS, EXT_NORMAL, "bit 0,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 0 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "0,(iy+%1)", "  FD  CB  <i>d</i>  47  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 0,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 0 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "1,(iy+%1)", "  FD  CB  <i>d</i>  48  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 1,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 1 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "1,(iy+%1)", "  FD  CB  <i>d</i>  49  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 1,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 1 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "1,(iy+%1)", "  FD  CB  <i>d</i>  4A  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 1,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 1 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "1,(iy+%1)", "  FD  CB  <i>d</i>  4B  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 1,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 1 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "1,(iy+%1)", "  FD  CB  <i>d</i>  4C  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 1,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 1 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "1,(iy+%1)", "  FD  CB  <i>d</i>  4D  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 1,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 1 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "1,(iy+%1)", "  FD  CB  <i>d</i>  4E  ", 4, "20", MODE_DIS, EXT_NORMAL, "bit 1,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 1 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "1,(iy+%1)", "  FD  CB  <i>d</i>  4F  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 1,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 1 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "2,(iy+%1)", "  FD  CB  <i>d</i>  50  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 2,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 2 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "2,(iy+%1)", "  FD  CB  <i>d</i>  51  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 2,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 2 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "2,(iy+%1)", "  FD  CB  <i>d</i>  52  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 2,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 2 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "2,(iy+%1)", "  FD  CB  <i>d</i>  53  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 2,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 2 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "2,(iy+%1)", "  FD  CB  <i>d</i>  54  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 2,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 2 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "2,(iy+%1)", "  FD  CB  <i>d</i>  55  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 2,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 2 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "2,(iy+%1)", "  FD  CB  <i>d</i>  56  ", 4, "20", MODE_DIS, EXT_NORMAL, "bit 2,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 2 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "2,(iy+%1)", "  FD  CB  <i>d</i>  57  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 2,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 2 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "3,(iy+%1)", "  FD  CB  <i>d</i>  58  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 3,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 3 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "3,(iy+%1)", "  FD  CB  <i>d</i>  59  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 3,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 3 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "3,(iy+%1)", "  FD  CB  <i>d</i>  5A  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 3,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 3 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "3,(iy+%1)", "  FD  CB  <i>d</i>  5B  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 3,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 3 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "3,(iy+%1)", "  FD  CB  <i>d</i>  5C  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 3,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 3 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "3,(iy+%1)", "  FD  CB  <i>d</i>  5D  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 3,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 3 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "3,(iy+%1)", "  FD  CB  <i>d</i>  5E  ", 4, "20", MODE_DIS, EXT_NORMAL, "bit 3,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 3 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "3,(iy+%1)", "  FD  CB  <i>d</i>  5F  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 3,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 3 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "4,(iy+%1)", "  FD  CB  <i>d</i>  60  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 4,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 4 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "4,(iy+%1)", "  FD  CB  <i>d</i>  61  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 4,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 4 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "4,(iy+%1)", "  FD  CB  <i>d</i>  62  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 4,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 4 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "4,(iy+%1)", "  FD  CB  <i>d</i>  63  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 4,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 4 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "4,(iy+%1)", "  FD  CB  <i>d</i>  64  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 4,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 4 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "4,(iy+%1)", "  FD  CB  <i>d</i>  65  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 4,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 4 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "4,(iy+%1)", "  FD  CB  <i>d</i>  66  ", 4, "20", MODE_DIS, EXT_NORMAL, "bit 4,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 4 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "4,(iy+%1)", "  FD  CB  <i>d</i>  67  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 4,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 4 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "5,(iy+%1)", "  FD  CB  <i>d</i>  68  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 5,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 5 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "5,(iy+%1)", "  FD  CB  <i>d</i>  69  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 5,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 5 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "5,(iy+%1)", "  FD  CB  <i>d</i>  6A  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 5,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 5 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "5,(iy+%1)", "  FD  CB  <i>d</i>  6B  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 5,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 5 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "5,(iy+%1)", "  FD  CB  <i>d</i>  6C  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 5,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 5 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "5,(iy+%1)", "  FD  CB  <i>d</i>  6D  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 5,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 5 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "5,(iy+%1)", "  FD  CB  <i>d</i>  6E  ", 4, "20", MODE_DIS, EXT_NORMAL, "bit 5,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 5 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "5,(iy+%1)", "  FD  CB  <i>d</i>  6F  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 5,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 5 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "6,(iy+%1)", "  FD  CB  <i>d</i>  70  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 6,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 6 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "6,(iy+%1)", "  FD  CB  <i>d</i>  71  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 6,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 6 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "6,(iy+%1)", "  FD  CB  <i>d</i>  72  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 6,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 6 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "6,(iy+%1)", "  FD  CB  <i>d</i>  73  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 6,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 6 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "6,(iy+%1)", "  FD  CB  <i>d</i>  74  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 6,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 6 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "6,(iy+%1)", "  FD  CB  <i>d</i>  75  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 6,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 6 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "6,(iy+%1)", "  FD  CB  <i>d</i>  76  ", 4, "20", MODE_DIS, EXT_NORMAL, "bit 6,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 6 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "6,(iy+%1)", "  FD  CB  <i>d</i>  77  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 6,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 6 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "7,(iy+%1)", "  FD  CB  <i>d</i>  78  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 7,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 7 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "7,(iy+%1)", "  FD  CB  <i>d</i>  79  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 7,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 7 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "7,(iy+%1)", "  FD  CB  <i>d</i>  7A  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 7,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 7 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "7,(iy+%1)", "  FD  CB  <i>d</i>  7B  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 7,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 7 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "7,(iy+%1)", "  FD  CB  <i>d</i>  7C  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 7,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 7 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "7,(iy+%1)", "  FD  CB  <i>d</i>  7D  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 7,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 7 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "7,(iy+%1)", "  FD  CB  <i>d</i>  7E  ", 4, "20", MODE_DIS, EXT_NORMAL, "bit 7,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 7 of the memory location pointed to by IY plus <i>d</i>." },
{ "bit", "7,(iy+%1)", "  FD  CB  <i>d</i>  7F  ", 4, "20", MODE_DIS, EXT_UNDOCUMENTED, "bit 7,(iy+<i>d</i>)", "N: reset<br>PV: undefined<br>H: set<br>Z: as defined<br>S: undefined<br>", "Tests bit 7 of the memory location pointed to by IY plus <i>d</i>." },
{ "res", "0,(iy+%1),b", "  FD  CB  <i>d</i>  80  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 0,(iy+<i>d</i>),b", "", "Resets bit 0 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in B." },
{ "res", "0,(iy+%1),c", "  FD  CB  <i>d</i>  81  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 0,(iy+<i>d</i>),c", "", "Resets bit 0 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in C." },
{ "res", "0,(iy+%1),d", "  FD  CB  <i>d</i>  82  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 0,(iy+<i>d</i>),d", "", "Resets bit 0 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in D." },
{ "res", "0,(iy+%1),e", "  FD  CB  <i>d</i>  83  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 0,(iy+<i>d</i>),e", "", "Resets bit 0 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in E." },
{ "res", "0,(iy+%1),h", "  FD  CB  <i>d</i>  84  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 0,(iy+<i>d</i>),h", "", "Resets bit 0 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in H." },
{ "res", "0,(iy+%1),l", "  FD  CB  <i>d</i>  85  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 0,(iy+<i>d</i>),l", "", "Resets bit 0 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in L." },
{ "res", "0,(iy+%1)", "  FD  CB  <i>d</i>  86  ", 4, "23", MODE_DIS, EXT_NORMAL, "res 0,(iy+<i>d</i>)", "", "Resets bit 0 of the memory location pointed to by IY plus <i>d</i>." },
{ "res", "0,(iy+%1),a", "  FD  CB  <i>d</i>  87  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 0,(iy+<i>d</i>),a", "", "Resets bit 0 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in A." },
{ "res", "1,(iy+%1),b", "  FD  CB  <i>d</i>  88  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 1,(iy+<i>d</i>),b", "", "Resets bit 1 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in B." },
{ "res", "1,(iy+%1),c", "  FD  CB  <i>d</i>  89  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 1,(iy+<i>d</i>),c", "", "Resets bit 1 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in C." },
{ "res", "1,(iy+%1),d", "  FD  CB  <i>d</i>  8A  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 1,(iy+<i>d</i>),d", "", "Resets bit 1 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in D." },
{ "res", "1,(iy+%1),e", "  FD  CB  <i>d</i>  8B  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 1,(iy+<i>d</i>),e", "", "Resets bit 1 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in E." },
{ "res", "1,(iy+%1),h", "  FD  CB  <i>d</i>  8C  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 1,(iy+<i>d</i>),h", "", "Resets bit 1 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in H." },
{ "res", "1,(iy+%1),l", "  FD  CB  <i>d</i>  8D  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 1,(iy+<i>d</i>),l", "", "Resets bit 1 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in L." },
{ "res", "1,(iy+%1)", "  FD  CB  <i>d</i>  8E  ", 4, "23", MODE_DIS, EXT_NORMAL, "res 1,(iy+<i>d</i>)", "", "Resets bit 1 of the memory location pointed to by IY plus <i>d</i>." },
{ "res", "1,(iy+%1),a", "  FD  CB  <i>d</i>  8F  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 1,(iy+<i>d</i>),a", "", "Resets bit 1 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in A." },
{ "res", "2,(iy+%1),b", "  FD  CB  <i>d</i>  90  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 2,(iy+<i>d</i>),b", "", "Resets bit 2 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in B." },
{ "res", "2,(iy+%1),c", "  FD  CB  <i>d</i>  91  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 2,(iy+<i>d</i>),c", "", "Resets bit 2 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in C." },
{ "res", "2,(iy+%1),d", "  FD  CB  <i>d</i>  92  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 2,(iy+<i>d</i>),d", "", "Resets bit 2 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in D." },
{ "res", "2,(iy+%1),e", "  FD  CB  <i>d</i>  93  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 2,(iy+<i>d</i>),e", "", "Resets bit 2 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in E." },
{ "res", "2,(iy+%1),h", "  FD  CB  <i>d</i>  94  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 2,(iy+<i>d</i>),h", "", "Resets bit 2 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in H." },
{ "res", "2,(iy+%1),l", "  FD  CB  <i>d</i>  95  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 2,(iy+<i>d</i>),l", "", "Resets bit 2 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in L." },
{ "res", "2,(iy+%1)", "  FD  CB  <i>d</i>  96  ", 4, "23", MODE_DIS, EXT_NORMAL, "res 2,(iy+<i>d</i>)", "", "Resets bit 2 of the memory location pointed to by IY plus <i>d</i>." },
{ "res", "2,(iy+%1),a", "  FD  CB  <i>d</i>  97  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 2,(iy+<i>d</i>),a", "", "Resets bit 2 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in A." },
{ "res", "3,(iy+%1),b", "  FD  CB  <i>d</i>  98  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 3,(iy+<i>d</i>),b", "", "Resets bit 3 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in B." },
{ "res", "3,(iy+%1),c", "  FD  CB  <i>d</i>  99  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 3,(iy+<i>d</i>),c", "", "Resets bit 3 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in C." },
{ "res", "3,(iy+%1),d", "  FD  CB  <i>d</i>  9A  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 3,(iy+<i>d</i>),d", "", "Resets bit 3 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in D." },
{ "res", "3,(iy+%1),e", "  FD  CB  <i>d</i>  9B  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 3,(iy+<i>d</i>),e", "", "Resets bit 3 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in E." },
{ "res", "3,(iy+%1),h", "  FD  CB  <i>d</i>  9C  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 3,(iy+<i>d</i>),h", "", "Resets bit 3 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in H." },
{ "res", "3,(iy+%1),l", "  FD  CB  <i>d</i>  9D  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 3,(iy+<i>d</i>),l", "", "Resets bit 3 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in L." },
{ "res", "3,(iy+%1)", "  FD  CB  <i>d</i>  9E  ", 4, "23", MODE_DIS, EXT_NORMAL, "res 3,(iy+<i>d</i>)", "", "Resets bit 3 of the memory location pointed to by IY plus <i>d</i>." },
{ "res", "3,(iy+%1),a", "  FD  CB  <i>d</i>  9F  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 3,(iy+<i>d</i>),a", "", "Resets bit 3 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in A." },
{ "res", "4,(iy+%1),b", "  FD  CB  <i>d</i>  A0  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 4,(iy+<i>d</i>),b", "", "Resets bit 4 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in B." },
{ "res", "4,(iy+%1),c", "  FD  CB  <i>d</i>  A1  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 4,(iy+<i>d</i>),c", "", "Resets bit 4 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in C." },
{ "res", "4,(iy+%1),d", "  FD  CB  <i>d</i>  A2  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 4,(iy+<i>d</i>),d", "", "Resets bit 4 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in D." },
{ "res", "4,(iy+%1),e", "  FD  CB  <i>d</i>  A3  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 4,(iy+<i>d</i>),e", "", "Resets bit 4 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in E." },
{ "res", "4,(iy+%1),h", "  FD  CB  <i>d</i>  A4  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 4,(iy+<i>d</i>),h", "", "Resets bit 4 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in H." },
{ "res", "4,(iy+%1),l", "  FD  CB  <i>d</i>  A5  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 4,(iy+<i>d</i>),l", "", "Resets bit 4 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in L." },
{ "res", "4,(iy+%1)", "  FD  CB  <i>d</i>  A6  ", 4, "23", MODE_DIS, EXT_NORMAL, "res 4,(iy+<i>d</i>)", "", "Resets bit 4 of the memory location pointed to by IY plus <i>d</i>." },
{ "res", "4,(iy+%1),a", "  FD  CB  <i>d</i>  A7  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 4,(iy+<i>d</i>),a", "", "Resets bit 4 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in A." },
{ "res", "5,(iy+%1),b", "  FD  CB  <i>d</i>  A8  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 5,(iy+<i>d</i>),b", "", "Resets bit 5 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in B." },
{ "res", "5,(iy+%1),c", "  FD  CB  <i>d</i>  A9  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 5,(iy+<i>d</i>),c", "", "Resets bit 5 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in C." },
{ "res", "5,(iy+%1),d", "  FD  CB  <i>d</i>  AA  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 5,(iy+<i>d</i>),d", "", "Resets bit 5 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in D." },
{ "res", "5,(iy+%1),e", "  FD  CB  <i>d</i>  AB  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 5,(iy+<i>d</i>),e", "", "Resets bit 5 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in E." },
{ "res", "5,(iy+%1),h", "  FD  CB  <i>d</i>  AC  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 5,(iy+<i>d</i>),h", "", "Resets bit 5 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in H." },
{ "res", "5,(iy+%1),l", "  FD  CB  <i>d</i>  AD  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 5,(iy+<i>d</i>),l", "", "Resets bit 5 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in L." },
{ "res", "5,(iy+%1)", "  FD  CB  <i>d</i>  AE  ", 4, "23", MODE_DIS, EXT_NORMAL, "res 5,(iy+<i>d</i>)", "", "Resets bit 5 of the memory location pointed to by IY plus <i>d</i>." },
{ "res", "5,(iy+%1),a", "  FD  CB  <i>d</i>  AF  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 5,(iy+<i>d</i>),a", "", "Resets bit 5 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in A." },
{ "res", "6,(iy+%1),b", "  FD  CB  <i>d</i>  B0  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 6,(iy+<i>d</i>),b", "", "Resets bit 6 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in B." },
{ "res", "6,(iy+%1),c", "  FD  CB  <i>d</i>  B1  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 6,(iy+<i>d</i>),c", "", "Resets bit 6 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in C." },
{ "res", "6,(iy+%1),d", "  FD  CB  <i>d</i>  B2  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 6,(iy+<i>d</i>),d", "", "Resets bit 6 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in D." },
{ "res", "6,(iy+%1),e", "  FD  CB  <i>d</i>  B3  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 6,(iy+<i>d</i>),e", "", "Resets bit 6 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in E." },
{ "res", "6,(iy+%1),h", "  FD  CB  <i>d</i>  B4  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 6,(iy+<i>d</i>),h", "", "Resets bit 6 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in H." },
{ "res", "6,(iy+%1),l", "  FD  CB  <i>d</i>  B5  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 6,(iy+<i>d</i>),l", "", "Resets bit 6 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in L." },
{ "res", "6,(iy+%1)", "  FD  CB  <i>d</i>  B6  ", 4, "23", MODE_DIS, EXT_NORMAL, "res 6,(iy+<i>d</i>)", "", "Resets bit 6 of the memory location pointed to by IY plus <i>d</i>." },
{ "res", "6,(iy+%1),a", "  FD  CB  <i>d</i>  B7  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 6,(iy+<i>d</i>),a", "", "Resets bit 6 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in A." },
{ "res", "7,(iy+%1),b", "  FD  CB  <i>d</i>  B8  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 7,(iy+<i>d</i>),b", "", "Resets bit 7 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in B." },
{ "res", "7,(iy+%1),c", "  FD  CB  <i>d</i>  B9  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 7,(iy+<i>d</i>),c", "", "Resets bit 7 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in C." },
{ "res", "7,(iy+%1),d", "  FD  CB  <i>d</i>  BA  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 7,(iy+<i>d</i>),d", "", "Resets bit 7 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in D." },
{ "res", "7,(iy+%1),e", "  FD  CB  <i>d</i>  BB  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 7,(iy+<i>d</i>),e", "", "Resets bit 7 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in E." },
{ "res", "7,(iy+%1),h", "  FD  CB  <i>d</i>  BC  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 7,(iy+<i>d</i>),h", "", "Resets bit 7 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in H." },
{ "res", "7,(iy+%1),l", "  FD  CB  <i>d</i>  BD  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 7,(iy+<i>d</i>),l", "", "Resets bit 7 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in L." },
{ "res", "7,(iy+%1)", "  FD  CB  <i>d</i>  BE  ", 4, "23", MODE_DIS, EXT_NORMAL, "res 7,(iy+<i>d</i>)", "", "Resets bit 7 of the memory location pointed to by IY plus <i>d</i>." },
{ "res", "7,(iy+%1),a", "  FD  CB  <i>d</i>  BF  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "res 7,(iy+<i>d</i>),a", "", "Resets bit 7 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in A." },
{ "set", "0,(iy+%1),b", "  FD  CB  <i>d</i>  C0  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 0,(iy+<i>d</i>),b", "", "Sets bit 0 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in B." },
{ "set", "0,(iy+%1),c", "  FD  CB  <i>d</i>  C1  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 0,(iy+<i>d</i>),c", "", "Sets bit 0 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in C." },
{ "set", "0,(iy+%1),d", "  FD  CB  <i>d</i>  C2  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 0,(iy+<i>d</i>),d", "", "Sets bit 0 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in D." },
{ "set", "0,(iy+%1),e", "  FD  CB  <i>d</i>  C3  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 0,(iy+<i>d</i>),e", "", "Sets bit 0 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in E." },
{ "set", "0,(iy+%1),h", "  FD  CB  <i>d</i>  C4  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 0,(iy+<i>d</i>),h", "", "Sets bit 0 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in H." },
{ "set", "0,(iy+%1),l", "  FD  CB  <i>d</i>  C5  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 0,(iy+<i>d</i>),l", "", "Sets bit 0 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in L." },
{ "set", "0,(iy+%1)", "  FD  CB  <i>d</i>  C6  ", 4, "23", MODE_DIS, EXT_NORMAL, "set 0,(iy+<i>d</i>)", "", "Sets bit 0 of the memory location pointed to by IY plus <i>d</i>." },
{ "set", "0,(iy+%1),a", "  FD  CB  <i>d</i>  C7  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 0,(iy+<i>d</i>),a", "", "Sets bit 0 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in A." },
{ "set", "1,(iy+%1),b", "  FD  CB  <i>d</i>  C8  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 1,(iy+<i>d</i>),b", "", "Sets bit 1 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in B." },
{ "set", "1,(iy+%1),c", "  FD  CB  <i>d</i>  C9  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 1,(iy+<i>d</i>),c", "", "Sets bit 1 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in C." },
{ "set", "1,(iy+%1),d", "  FD  CB  <i>d</i>  CA  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 1,(iy+<i>d</i>),d", "", "Sets bit 1 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in D." },
{ "set", "1,(iy+%1),e", "  FD  CB  <i>d</i>  CB  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 1,(iy+<i>d</i>),e", "", "Sets bit 1 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in E." },
{ "set", "1,(iy+%1),h", "  FD  CB  <i>d</i>  CC  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 1,(iy+<i>d</i>),h", "", "Sets bit 1 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in H." },
{ "set", "1,(iy+%1),l", "  FD  CB  <i>d</i>  CD  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 1,(iy+<i>d</i>),l", "", "Sets bit 1 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in L." },
{ "set", "1,(iy+%1)", "  FD  CB  <i>d</i>  CE  ", 4, "23", MODE_DIS, EXT_NORMAL, "set 1,(iy+<i>d</i>)", "", "Sets bit 1 of the memory location pointed to by IY plus <i>d</i>." },
{ "set", "1,(iy+%1),a", "  FD  CB  <i>d</i>  CF  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 1,(iy+<i>d</i>),a", "", "Sets bit 1 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in A." },
{ "set", "2,(iy+%1),b", "  FD  CB  <i>d</i>  D0  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 2,(iy+<i>d</i>),b", "", "Sets bit 2 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in B." },
{ "set", "2,(iy+%1),c", "  FD  CB  <i>d</i>  D1  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 2,(iy+<i>d</i>),c", "", "Sets bit 2 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in C." },
{ "set", "2,(iy+%1),d", "  FD  CB  <i>d</i>  D2  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 2,(iy+<i>d</i>),d", "", "Sets bit 2 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in D." },
{ "set", "2,(iy+%1),e", "  FD  CB  <i>d</i>  D3  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 2,(iy+<i>d</i>),e", "", "Sets bit 2 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in E." },
{ "set", "2,(iy+%1),h", "  FD  CB  <i>d</i>  D4  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 2,(iy+<i>d</i>),h", "", "Sets bit 2 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in H." },
{ "set", "2,(iy+%1),l", "  FD  CB  <i>d</i>  D5  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 2,(iy+<i>d</i>),l", "", "Sets bit 2 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in L." },
{ "set", "2,(iy+%1)", "  FD  CB  <i>d</i>  D6  ", 4, "23", MODE_DIS, EXT_NORMAL, "set 2,(iy+<i>d</i>)", "", "Sets bit 2 of the memory location pointed to by IY plus <i>d</i>." },
{ "set", "2,(iy+%1),a", "  FD  CB  <i>d</i>  D7  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 2,(iy+<i>d</i>),a", "", "Sets bit 2 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in A." },
{ "set", "3,(iy+%1),b", "  FD  CB  <i>d</i>  D8  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 3,(iy+<i>d</i>),b", "", "Sets bit 3 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in B." },
{ "set", "3,(iy+%1),c", "  FD  CB  <i>d</i>  D9  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 3,(iy+<i>d</i>),c", "", "Sets bit 3 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in C." },
{ "set", "3,(iy+%1),d", "  FD  CB  <i>d</i>  DA  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 3,(iy+<i>d</i>),d", "", "Sets bit 3 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in D." },
{ "set", "3,(iy+%1),e", "  FD  CB  <i>d</i>  DB  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 3,(iy+<i>d</i>),e", "", "Sets bit 3 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in E." },
{ "set", "3,(iy+%1),h", "  FD  CB  <i>d</i>  DC  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 3,(iy+<i>d</i>),h", "", "Sets bit 3 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in H." },
{ "set", "3,(iy+%1),l", "  FD  CB  <i>d</i>  DD  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 3,(iy+<i>d</i>),l", "", "Sets bit 3 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in L." },
{ "set", "3,(iy+%1)", "  FD  CB  <i>d</i>  DE  ", 4, "23", MODE_DIS, EXT_NORMAL, "set 3,(iy+<i>d</i>)", "", "Sets bit 3 of the memory location pointed to by IY plus <i>d</i>." },
{ "set", "3,(iy+%1),a", "  FD  CB  <i>d</i>  DF  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 3,(iy+<i>d</i>),a", "", "Sets bit 3 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in A." },
{ "set", "4,(iy+%1),b", "  FD  CB  <i>d</i>  E0  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 4,(iy+<i>d</i>),b", "", "Sets bit 4 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in B." },
{ "set", "4,(iy+%1),c", "  FD  CB  <i>d</i>  E1  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 4,(iy+<i>d</i>),c", "", "Sets bit 4 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in C." },
{ "set", "4,(iy+%1),d", "  FD  CB  <i>d</i>  E2  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 4,(iy+<i>d</i>),d", "", "Sets bit 4 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in D." },
{ "set", "4,(iy+%1),e", "  FD  CB  <i>d</i>  E3  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 4,(iy+<i>d</i>),e", "", "Sets bit 4 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in E." },
{ "set", "4,(iy+%1),h", "  FD  CB  <i>d</i>  E4  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 4,(iy+<i>d</i>),h", "", "Sets bit 4 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in H." },
{ "set", "4,(iy+%1),l", "  FD  CB  <i>d</i>  E5  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 4,(iy+<i>d</i>),l", "", "Sets bit 4 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in L." },
{ "set", "4,(iy+%1)", "  FD  CB  <i>d</i>  E6  ", 4, "23", MODE_DIS, EXT_NORMAL, "set 4,(iy+<i>d</i>)", "", "Sets bit 4 of the memory location pointed to by IY plus <i>d</i>." },
{ "set", "4,(iy+%1),a", "  FD  CB  <i>d</i>  E7  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 4,(iy+<i>d</i>),a", "", "Sets bit 4 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in A." },
{ "set", "5,(iy+%1),b", "  FD  CB  <i>d</i>  E8  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 5,(iy+<i>d</i>),b", "", "Sets bit 5 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in B." },
{ "set", "5,(iy+%1),c", "  FD  CB  <i>d</i>  E9  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 5,(iy+<i>d</i>),c", "", "Sets bit 5 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in C." },
{ "set", "5,(iy+%1),d", "  FD  CB  <i>d</i>  EA  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 5,(iy+<i>d</i>),d", "", "Sets bit 5 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in D." },
{ "set", "5,(iy+%1),e", "  FD  CB  <i>d</i>  EB  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 5,(iy+<i>d</i>),e", "", "Sets bit 5 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in E." },
{ "set", "5,(iy+%1),h", "  FD  CB  <i>d</i>  EC  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 5,(iy+<i>d</i>),h", "", "Sets bit 5 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in H." },
{ "set", "5,(iy+%1),l", "  FD  CB  <i>d</i>  ED  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 5,(iy+<i>d</i>),l", "", "Sets bit 5 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in L." },
{ "set", "5,(iy+%1)", "  FD  CB  <i>d</i>  EE  ", 4, "23", MODE_DIS, EXT_NORMAL, "set 5,(iy+<i>d</i>)", "", "Sets bit 5 of the memory location pointed to by IY plus <i>d</i>." },
{ "set", "5,(iy+%1),a", "  FD  CB  <i>d</i>  EF  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 5,(iy+<i>d</i>),a", "", "Sets bit 5 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in A." },
{ "set", "6,(iy+%1),b", "  FD  CB  <i>d</i>  F0  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 6,(iy+<i>d</i>),b", "", "Sets bit 6 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in B." },
{ "set", "6,(iy+%1),c", "  FD  CB  <i>d</i>  F1  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 6,(iy+<i>d</i>),c", "", "Sets bit 6 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in C." },
{ "set", "6,(iy+%1),d", "  FD  CB  <i>d</i>  F2  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 6,(iy+<i>d</i>),d", "", "Sets bit 6 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in D." },
{ "set", "6,(iy+%1),e", "  FD  CB  <i>d</i>  F3  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 6,(iy+<i>d</i>),e", "", "Sets bit 6 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in E." },
{ "set", "6,(iy+%1),h", "  FD  CB  <i>d</i>  F4  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 6,(iy+<i>d</i>),h", "", "Sets bit 6 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in H." },
{ "set", "6,(iy+%1),l", "  FD  CB  <i>d</i>  F5  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 6,(iy+<i>d</i>),l", "", "Sets bit 6 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in L." },
{ "set", "6,(iy+%1)", "  FD  CB  <i>d</i>  F6  ", 4, "23", MODE_DIS, EXT_NORMAL, "set 6,(iy+<i>d</i>)", "", "Sets bit 6 of the memory location pointed to by IY plus <i>d</i>." },
{ "set", "6,(iy+%1),a", "  FD  CB  <i>d</i>  F7  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 6,(iy+<i>d</i>),a", "", "Sets bit 6 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in A." },
{ "set", "7,(iy+%1),b", "  FD  CB  <i>d</i>  F8  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 7,(iy+<i>d</i>),b", "", "Sets bit 7 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in B." },
{ "set", "7,(iy+%1),c", "  FD  CB  <i>d</i>  F9  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 7,(iy+<i>d</i>),c", "", "Sets bit 7 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in C." },
{ "set", "7,(iy+%1),d", "  FD  CB  <i>d</i>  FA  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 7,(iy+<i>d</i>),d", "", "Sets bit 7 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in D." },
{ "set", "7,(iy+%1),e", "  FD  CB  <i>d</i>  FB  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 7,(iy+<i>d</i>),e", "", "Sets bit 7 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in E." },
{ "set", "7,(iy+%1),h", "  FD  CB  <i>d</i>  FC  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 7,(iy+<i>d</i>),h", "", "Sets bit 7 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in H." },
{ "set", "7,(iy+%1),l", "  FD  CB  <i>d</i>  FD  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 7,(iy+<i>d</i>),l", "", "Sets bit 7 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in L." },
{ "set", "7,(iy+%1)", "  FD  CB  <i>d</i>  FE  ", 4, "23", MODE_DIS, EXT_NORMAL, "set 7,(iy+<i>d</i>)", "", "Sets bit 7 of the memory location pointed to by IY plus <i>d</i>." },
{ "set", "7,(iy+%1),a", "  FD  CB  <i>d</i>  FF  ", 4, "23", MODE_DIS, EXT_UNDOCUMENTED, "set 7,(iy+<i>d</i>),a", "", "Sets bit 7 of the memory location pointed to by IY plus <i>d</i>. The result is then stored in A." },
};

struct distabitem ignore_prefix_dd = { ".byte $dd", "; ignore extra prefix", "", 1, "4", MODE_IMP, EXT_NORMAL, "", "", "" };
struct distabitem ignore_prefix_fd = { ".byte $fd", "; ignore extra prefix", "", 1, "4", MODE_IMP, EXT_NORMAL, "", "", "" };

void DisassemblerZ80::initTables(void) {
    // delete EXT_UNDOCUMENTED and/or EXT_Z180
    bool del_undoc = true;
    bool del_z180 = true;
    if (this->cputype == CT_ZILOG_Z80UNDOC)
        del_undoc = false;
    if (this->cputype == CT_ZILOG_Z180)
        del_z180 = false;
    if (this->cputype == CT_ZILOG_Z180UNDOC)
        del_undoc = false;

#define DEL_IF_EXTMODE(x,y) if (x[i].extmode == y) x[i] = INVALID;

    for (int i = 0; i<256; i++) {
        if (del_undoc) {
            DEL_IF_EXTMODE(distab_normal, EXT_UNDOCUMENTED);
            DEL_IF_EXTMODE(distab_CB,     EXT_UNDOCUMENTED);
            DEL_IF_EXTMODE(distab_DD,     EXT_UNDOCUMENTED);
            DEL_IF_EXTMODE(distab_ED,     EXT_UNDOCUMENTED);
            DEL_IF_EXTMODE(distab_FD,     EXT_UNDOCUMENTED);
            DEL_IF_EXTMODE(distab_DDCB,   EXT_UNDOCUMENTED);
            DEL_IF_EXTMODE(distab_FDCB,   EXT_UNDOCUMENTED);
        }
        if (del_z180) {
            DEL_IF_EXTMODE(distab_normal, EXT_Z180);
            DEL_IF_EXTMODE(distab_CB,     EXT_Z180);
            DEL_IF_EXTMODE(distab_DD,     EXT_Z180);
            DEL_IF_EXTMODE(distab_ED,     EXT_Z180);
            DEL_IF_EXTMODE(distab_FD,     EXT_Z180);
            DEL_IF_EXTMODE(distab_DDCB,   EXT_Z180);
            DEL_IF_EXTMODE(distab_FDCB,   EXT_Z180);
        }
    }

    hexPrefix = QStringLiteral("$");
    hexSuffix = QLatin1String("");
    toUpper   = false;
}


static struct distabitem *get_distabitem_at(quint64 relpos) {
    quint8 *data = segments[currentSegment].data;
    quint8 byte0 = data[relpos];        // createEmptySegment allows reading beyond end
    quint8 byte1 = data[relpos+1];      // so we don't need checks here
//    quint8 byte2 = data[relpos+2];    // but only in disassembler.cpp
    quint8 byte3 = data[relpos+3];      //

    struct distabitem *item;

    switch(byte0) {

    default:    item = &distab_normal[byte0];   break;
    case 0xcb:  item = &distab_CB[byte0];       break;
    case 0xed:  item = &distab_ED[byte0];       break;

    case 0xdd:
        switch(byte1) {
        default:    item = &distab_DD[byte1];   break;
        case 0xcb:  item = &distab_DDCB[byte3]; break;
        case 0xdd: [[fallthrough]];
        case 0xed: [[fallthrough]];
        case 0xfd:
             return &ignore_prefix_dd;
        }
        break;

    case 0xfd:
        switch(byte1) {
        default:    item = &distab_FD[byte1];   break;
        case 0xcb:  item = &distab_FDCB[byte3]; break;
        case 0xdd: [[fallthrough]];
        case 0xed: [[fallthrough]];
        case 0xfd:
             return &ignore_prefix_fd;
        }
        break;
    }

    return item;
}

int DisassemblerZ80::getInstructionSizeAt(quint64 relpos) {

    struct distabitem *item  = get_distabitem_at(relpos);

    if (item->inst == nullptr)
        return 1;   // invalid instruction
    else
        return item->size;
}

// Label:   MODE_NN && EXT_JUMP
//          MODE_NN && EXT_CALL
//          MODE_MEM_NN
//          MODE_DIS && EXT_JUMP

void DisassemblerZ80::createOperandLabels(quint64 relpos, bool generateLocalLabels) {
}

void DisassemblerZ80::disassembleInstructionAt(quint64 relpos, struct disassembly &dis, int &n) {
}

void DisassemblerZ80::trace(quint64 address) {
    struct segment *s = &segments[currentSegment];
    quint64 relpos = address - s->start;

}

QString DisassemblerZ80::getDescriptionAt(quint64 address) {
}
